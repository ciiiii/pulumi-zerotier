// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * Data source for ZeroTier networks, allowing you to find a network by ID
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as zerotier from "@pulumi/zerotier";
 *
 * const bob = zerotier.gerNetwork({
 *     id: zerotier_network.bobs_garage.id,
 * });
 * ```
 */
export function gerNetwork(args?: GerNetworkArgs, opts?: pulumi.InvokeOptions): Promise<GerNetworkResult> {
    args = args || {};
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("zerotier:index/gerNetwork:gerNetwork", {
        "assignIpv4s": args.assignIpv4s,
        "assignIpv6s": args.assignIpv6s,
        "assignmentPools": args.assignmentPools,
        "description": args.description,
        "enableBroadcast": args.enableBroadcast,
        "flowRules": args.flowRules,
        "id": args.id,
        "multicastLimit": args.multicastLimit,
        "name": args.name,
        "private": args.private,
        "routes": args.routes,
    }, opts);
}

/**
 * A collection of arguments for invoking gerNetwork.
 */
export interface GerNetworkArgs {
    /**
     * IPv4 Assignment RuleSets
     */
    assignIpv4s?: inputs.GerNetworkAssignIpv4[];
    /**
     * IPv6 Assignment RuleSets
     */
    assignIpv6s?: inputs.GerNetworkAssignIpv6[];
    /**
     * Rules regarding IPv4 and IPv6 assignments
     */
    assignmentPools?: inputs.GerNetworkAssignmentPool[];
    /**
     * The description of the network
     */
    description?: string;
    /**
     * Enable broadcast packets on the network
     */
    enableBroadcast?: boolean;
    /**
     * The layer 2 flow rules to apply to packets traveling across this network. Please see https://www.zerotier.com/manual/#3*4*1 for more information.
     */
    flowRules?: string;
    /**
     * ZeroTier's internal network identifier, aka NetworkID
     */
    id?: string;
    /**
     * Maximum number of recipients per multicast or broadcast. Warning - Setting this to 0 will disable IPv4 communication on your network!
     */
    multicastLimit?: number;
    /**
     * The name of the network
     */
    name?: string;
    /**
     * Whether or not the network is private.  If false, members will *NOT* need to be authorized to join.
     */
    private?: boolean;
    /**
     * A ipv4 or ipv6 network route
     */
    routes?: inputs.GerNetworkRoute[];
}

/**
 * A collection of values returned by gerNetwork.
 */
export interface GerNetworkResult {
    /**
     * IPv4 Assignment RuleSets
     */
    readonly assignIpv4s: outputs.GerNetworkAssignIpv4[];
    /**
     * IPv6 Assignment RuleSets
     */
    readonly assignIpv6s: outputs.GerNetworkAssignIpv6[];
    /**
     * Rules regarding IPv4 and IPv6 assignments
     */
    readonly assignmentPools: outputs.GerNetworkAssignmentPool[];
    /**
     * The time at which this network was created, in epoch seconds
     */
    readonly creationTime: number;
    /**
     * The description of the network
     */
    readonly description?: string;
    /**
     * Enable broadcast packets on the network
     */
    readonly enableBroadcast?: boolean;
    /**
     * The layer 2 flow rules to apply to packets traveling across this network. Please see https://www.zerotier.com/manual/#3*4*1 for more information.
     */
    readonly flowRules?: string;
    /**
     * ZeroTier's internal network identifier, aka NetworkID
     */
    readonly id: string;
    /**
     * Maximum number of recipients per multicast or broadcast. Warning - Setting this to 0 will disable IPv4 communication on your network!
     */
    readonly multicastLimit?: number;
    /**
     * The name of the network
     */
    readonly name: string;
    /**
     * Whether or not the network is private.  If false, members will *NOT* need to be authorized to join.
     */
    readonly private?: boolean;
    /**
     * A ipv4 or ipv6 network route
     */
    readonly routes: outputs.GerNetworkRoute[];
}

export function gerNetworkOutput(args?: GerNetworkOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GerNetworkResult> {
    return pulumi.output(args).apply(a => gerNetwork(a, opts))
}

/**
 * A collection of arguments for invoking gerNetwork.
 */
export interface GerNetworkOutputArgs {
    /**
     * IPv4 Assignment RuleSets
     */
    assignIpv4s?: pulumi.Input<pulumi.Input<inputs.GerNetworkAssignIpv4Args>[]>;
    /**
     * IPv6 Assignment RuleSets
     */
    assignIpv6s?: pulumi.Input<pulumi.Input<inputs.GerNetworkAssignIpv6Args>[]>;
    /**
     * Rules regarding IPv4 and IPv6 assignments
     */
    assignmentPools?: pulumi.Input<pulumi.Input<inputs.GerNetworkAssignmentPoolArgs>[]>;
    /**
     * The description of the network
     */
    description?: pulumi.Input<string>;
    /**
     * Enable broadcast packets on the network
     */
    enableBroadcast?: pulumi.Input<boolean>;
    /**
     * The layer 2 flow rules to apply to packets traveling across this network. Please see https://www.zerotier.com/manual/#3*4*1 for more information.
     */
    flowRules?: pulumi.Input<string>;
    /**
     * ZeroTier's internal network identifier, aka NetworkID
     */
    id?: pulumi.Input<string>;
    /**
     * Maximum number of recipients per multicast or broadcast. Warning - Setting this to 0 will disable IPv4 communication on your network!
     */
    multicastLimit?: pulumi.Input<number>;
    /**
     * The name of the network
     */
    name?: pulumi.Input<string>;
    /**
     * Whether or not the network is private.  If false, members will *NOT* need to be authorized to join.
     */
    private?: pulumi.Input<boolean>;
    /**
     * A ipv4 or ipv6 network route
     */
    routes?: pulumi.Input<pulumi.Input<inputs.GerNetworkRouteArgs>[]>;
}
