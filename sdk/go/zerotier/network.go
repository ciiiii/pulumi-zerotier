// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package zerotier

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Network provider for ZeroTier, allows you to create ZeroTier networks.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-zerotier/sdk/go/zerotier"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := zerotier.NewNetwork(ctx, "myNetwork", &zerotier.NetworkArgs{
// 			AssignIpv4s: NetworkAssignIpv4Array{
// 				&NetworkAssignIpv4Args{
// 					Zerotier: pulumi.Bool(true),
// 				},
// 			},
// 			AssignIpv6s: NetworkAssignIpv6Array{
// 				&NetworkAssignIpv6Args{
// 					Rfc4193:  pulumi.Bool(false),
// 					Sixplane: pulumi.Bool(false),
// 					Zerotier: pulumi.Bool(true),
// 				},
// 			},
// 			Description:     pulumi.String("Managed by Terraform"),
// 			EnableBroadcast: pulumi.Bool(true),
// 			FlowRules:       pulumi.String("accept;"),
// 			Private:         pulumi.Bool(false),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Networks can be imported using their ID, e.g.
//
// ```sh
//  $ pulumi import zerotier:index/network:Network network 8056c2e21c1930be
// ```
type Network struct {
	pulumi.CustomResourceState

	// IPv4 Assignment RuleSets
	AssignIpv4s NetworkAssignIpv4ArrayOutput `pulumi:"assignIpv4s"`
	// IPv6 Assignment RuleSets
	AssignIpv6s NetworkAssignIpv6ArrayOutput `pulumi:"assignIpv6s"`
	// Rules regarding IPv4 and IPv6 assignments
	AssignmentPools NetworkAssignmentPoolArrayOutput `pulumi:"assignmentPools"`
	// The time at which this network was created, in epoch seconds
	CreationTime pulumi.IntOutput `pulumi:"creationTime"`
	// The description of the network
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Enable broadcast packets on the network
	EnableBroadcast pulumi.BoolPtrOutput `pulumi:"enableBroadcast"`
	// The layer 2 flow rules to apply to packets traveling across this network. Please see https://www.zerotier.com/manual/#3*4*1 for more information.
	FlowRules pulumi.StringPtrOutput `pulumi:"flowRules"`
	// ZeroTier's internal network identifier, aka NetworkID
	Id pulumi.StringOutput `pulumi:"id"`
	// Maximum number of recipients per multicast or broadcast. Warning - Setting this to 0 will disable IPv4 communication on your network!
	MulticastLimit pulumi.IntPtrOutput `pulumi:"multicastLimit"`
	// The name of the network
	Name pulumi.StringOutput `pulumi:"name"`
	// Whether or not the network is private.  If false, members will *NOT* need to be authorized to join.
	Private pulumi.BoolPtrOutput `pulumi:"private"`
	// A ipv4 or ipv6 network route
	Routes NetworkRouteArrayOutput `pulumi:"routes"`
}

// NewNetwork registers a new resource with the given unique name, arguments, and options.
func NewNetwork(ctx *pulumi.Context,
	name string, args *NetworkArgs, opts ...pulumi.ResourceOption) (*Network, error) {
	if args == nil {
		args = &NetworkArgs{}
	}

	var resource Network
	err := ctx.RegisterResource("zerotier:index/network:Network", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetwork gets an existing Network resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetwork(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetworkState, opts ...pulumi.ResourceOption) (*Network, error) {
	var resource Network
	err := ctx.ReadResource("zerotier:index/network:Network", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Network resources.
type networkState struct {
	// IPv4 Assignment RuleSets
	AssignIpv4s []NetworkAssignIpv4 `pulumi:"assignIpv4s"`
	// IPv6 Assignment RuleSets
	AssignIpv6s []NetworkAssignIpv6 `pulumi:"assignIpv6s"`
	// Rules regarding IPv4 and IPv6 assignments
	AssignmentPools []NetworkAssignmentPool `pulumi:"assignmentPools"`
	// The time at which this network was created, in epoch seconds
	CreationTime *int `pulumi:"creationTime"`
	// The description of the network
	Description *string `pulumi:"description"`
	// Enable broadcast packets on the network
	EnableBroadcast *bool `pulumi:"enableBroadcast"`
	// The layer 2 flow rules to apply to packets traveling across this network. Please see https://www.zerotier.com/manual/#3*4*1 for more information.
	FlowRules *string `pulumi:"flowRules"`
	// ZeroTier's internal network identifier, aka NetworkID
	Id *string `pulumi:"id"`
	// Maximum number of recipients per multicast or broadcast. Warning - Setting this to 0 will disable IPv4 communication on your network!
	MulticastLimit *int `pulumi:"multicastLimit"`
	// The name of the network
	Name *string `pulumi:"name"`
	// Whether or not the network is private.  If false, members will *NOT* need to be authorized to join.
	Private *bool `pulumi:"private"`
	// A ipv4 or ipv6 network route
	Routes []NetworkRoute `pulumi:"routes"`
}

type NetworkState struct {
	// IPv4 Assignment RuleSets
	AssignIpv4s NetworkAssignIpv4ArrayInput
	// IPv6 Assignment RuleSets
	AssignIpv6s NetworkAssignIpv6ArrayInput
	// Rules regarding IPv4 and IPv6 assignments
	AssignmentPools NetworkAssignmentPoolArrayInput
	// The time at which this network was created, in epoch seconds
	CreationTime pulumi.IntPtrInput
	// The description of the network
	Description pulumi.StringPtrInput
	// Enable broadcast packets on the network
	EnableBroadcast pulumi.BoolPtrInput
	// The layer 2 flow rules to apply to packets traveling across this network. Please see https://www.zerotier.com/manual/#3*4*1 for more information.
	FlowRules pulumi.StringPtrInput
	// ZeroTier's internal network identifier, aka NetworkID
	Id pulumi.StringPtrInput
	// Maximum number of recipients per multicast or broadcast. Warning - Setting this to 0 will disable IPv4 communication on your network!
	MulticastLimit pulumi.IntPtrInput
	// The name of the network
	Name pulumi.StringPtrInput
	// Whether or not the network is private.  If false, members will *NOT* need to be authorized to join.
	Private pulumi.BoolPtrInput
	// A ipv4 or ipv6 network route
	Routes NetworkRouteArrayInput
}

func (NetworkState) ElementType() reflect.Type {
	return reflect.TypeOf((*networkState)(nil)).Elem()
}

type networkArgs struct {
	// IPv4 Assignment RuleSets
	AssignIpv4s []NetworkAssignIpv4 `pulumi:"assignIpv4s"`
	// IPv6 Assignment RuleSets
	AssignIpv6s []NetworkAssignIpv6 `pulumi:"assignIpv6s"`
	// Rules regarding IPv4 and IPv6 assignments
	AssignmentPools []NetworkAssignmentPool `pulumi:"assignmentPools"`
	// The description of the network
	Description *string `pulumi:"description"`
	// Enable broadcast packets on the network
	EnableBroadcast *bool `pulumi:"enableBroadcast"`
	// The layer 2 flow rules to apply to packets traveling across this network. Please see https://www.zerotier.com/manual/#3*4*1 for more information.
	FlowRules *string `pulumi:"flowRules"`
	// ZeroTier's internal network identifier, aka NetworkID
	Id *string `pulumi:"id"`
	// Maximum number of recipients per multicast or broadcast. Warning - Setting this to 0 will disable IPv4 communication on your network!
	MulticastLimit *int `pulumi:"multicastLimit"`
	// The name of the network
	Name *string `pulumi:"name"`
	// Whether or not the network is private.  If false, members will *NOT* need to be authorized to join.
	Private *bool `pulumi:"private"`
	// A ipv4 or ipv6 network route
	Routes []NetworkRoute `pulumi:"routes"`
}

// The set of arguments for constructing a Network resource.
type NetworkArgs struct {
	// IPv4 Assignment RuleSets
	AssignIpv4s NetworkAssignIpv4ArrayInput
	// IPv6 Assignment RuleSets
	AssignIpv6s NetworkAssignIpv6ArrayInput
	// Rules regarding IPv4 and IPv6 assignments
	AssignmentPools NetworkAssignmentPoolArrayInput
	// The description of the network
	Description pulumi.StringPtrInput
	// Enable broadcast packets on the network
	EnableBroadcast pulumi.BoolPtrInput
	// The layer 2 flow rules to apply to packets traveling across this network. Please see https://www.zerotier.com/manual/#3*4*1 for more information.
	FlowRules pulumi.StringPtrInput
	// ZeroTier's internal network identifier, aka NetworkID
	Id pulumi.StringPtrInput
	// Maximum number of recipients per multicast or broadcast. Warning - Setting this to 0 will disable IPv4 communication on your network!
	MulticastLimit pulumi.IntPtrInput
	// The name of the network
	Name pulumi.StringPtrInput
	// Whether or not the network is private.  If false, members will *NOT* need to be authorized to join.
	Private pulumi.BoolPtrInput
	// A ipv4 or ipv6 network route
	Routes NetworkRouteArrayInput
}

func (NetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*networkArgs)(nil)).Elem()
}

type NetworkInput interface {
	pulumi.Input

	ToNetworkOutput() NetworkOutput
	ToNetworkOutputWithContext(ctx context.Context) NetworkOutput
}

func (*Network) ElementType() reflect.Type {
	return reflect.TypeOf((**Network)(nil)).Elem()
}

func (i *Network) ToNetworkOutput() NetworkOutput {
	return i.ToNetworkOutputWithContext(context.Background())
}

func (i *Network) ToNetworkOutputWithContext(ctx context.Context) NetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkOutput)
}

// NetworkArrayInput is an input type that accepts NetworkArray and NetworkArrayOutput values.
// You can construct a concrete instance of `NetworkArrayInput` via:
//
//          NetworkArray{ NetworkArgs{...} }
type NetworkArrayInput interface {
	pulumi.Input

	ToNetworkArrayOutput() NetworkArrayOutput
	ToNetworkArrayOutputWithContext(context.Context) NetworkArrayOutput
}

type NetworkArray []NetworkInput

func (NetworkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Network)(nil)).Elem()
}

func (i NetworkArray) ToNetworkArrayOutput() NetworkArrayOutput {
	return i.ToNetworkArrayOutputWithContext(context.Background())
}

func (i NetworkArray) ToNetworkArrayOutputWithContext(ctx context.Context) NetworkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkArrayOutput)
}

// NetworkMapInput is an input type that accepts NetworkMap and NetworkMapOutput values.
// You can construct a concrete instance of `NetworkMapInput` via:
//
//          NetworkMap{ "key": NetworkArgs{...} }
type NetworkMapInput interface {
	pulumi.Input

	ToNetworkMapOutput() NetworkMapOutput
	ToNetworkMapOutputWithContext(context.Context) NetworkMapOutput
}

type NetworkMap map[string]NetworkInput

func (NetworkMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Network)(nil)).Elem()
}

func (i NetworkMap) ToNetworkMapOutput() NetworkMapOutput {
	return i.ToNetworkMapOutputWithContext(context.Background())
}

func (i NetworkMap) ToNetworkMapOutputWithContext(ctx context.Context) NetworkMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkMapOutput)
}

type NetworkOutput struct{ *pulumi.OutputState }

func (NetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Network)(nil)).Elem()
}

func (o NetworkOutput) ToNetworkOutput() NetworkOutput {
	return o
}

func (o NetworkOutput) ToNetworkOutputWithContext(ctx context.Context) NetworkOutput {
	return o
}

type NetworkArrayOutput struct{ *pulumi.OutputState }

func (NetworkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Network)(nil)).Elem()
}

func (o NetworkArrayOutput) ToNetworkArrayOutput() NetworkArrayOutput {
	return o
}

func (o NetworkArrayOutput) ToNetworkArrayOutputWithContext(ctx context.Context) NetworkArrayOutput {
	return o
}

func (o NetworkArrayOutput) Index(i pulumi.IntInput) NetworkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Network {
		return vs[0].([]*Network)[vs[1].(int)]
	}).(NetworkOutput)
}

type NetworkMapOutput struct{ *pulumi.OutputState }

func (NetworkMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Network)(nil)).Elem()
}

func (o NetworkMapOutput) ToNetworkMapOutput() NetworkMapOutput {
	return o
}

func (o NetworkMapOutput) ToNetworkMapOutputWithContext(ctx context.Context) NetworkMapOutput {
	return o
}

func (o NetworkMapOutput) MapIndex(k pulumi.StringInput) NetworkOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Network {
		return vs[0].(map[string]*Network)[vs[1].(string)]
	}).(NetworkOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkInput)(nil)).Elem(), &Network{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkArrayInput)(nil)).Elem(), NetworkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkMapInput)(nil)).Elem(), NetworkMap{})
	pulumi.RegisterOutputType(NetworkOutput{})
	pulumi.RegisterOutputType(NetworkArrayOutput{})
	pulumi.RegisterOutputType(NetworkMapOutput{})
}
