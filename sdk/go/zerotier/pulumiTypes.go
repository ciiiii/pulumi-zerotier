// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package zerotier

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type NetworkAssignIpv4 struct {
	Zerotier *bool `pulumi:"zerotier"`
}

// NetworkAssignIpv4Input is an input type that accepts NetworkAssignIpv4Args and NetworkAssignIpv4Output values.
// You can construct a concrete instance of `NetworkAssignIpv4Input` via:
//
//          NetworkAssignIpv4Args{...}
type NetworkAssignIpv4Input interface {
	pulumi.Input

	ToNetworkAssignIpv4Output() NetworkAssignIpv4Output
	ToNetworkAssignIpv4OutputWithContext(context.Context) NetworkAssignIpv4Output
}

type NetworkAssignIpv4Args struct {
	Zerotier pulumi.BoolPtrInput `pulumi:"zerotier"`
}

func (NetworkAssignIpv4Args) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkAssignIpv4)(nil)).Elem()
}

func (i NetworkAssignIpv4Args) ToNetworkAssignIpv4Output() NetworkAssignIpv4Output {
	return i.ToNetworkAssignIpv4OutputWithContext(context.Background())
}

func (i NetworkAssignIpv4Args) ToNetworkAssignIpv4OutputWithContext(ctx context.Context) NetworkAssignIpv4Output {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkAssignIpv4Output)
}

// NetworkAssignIpv4ArrayInput is an input type that accepts NetworkAssignIpv4Array and NetworkAssignIpv4ArrayOutput values.
// You can construct a concrete instance of `NetworkAssignIpv4ArrayInput` via:
//
//          NetworkAssignIpv4Array{ NetworkAssignIpv4Args{...} }
type NetworkAssignIpv4ArrayInput interface {
	pulumi.Input

	ToNetworkAssignIpv4ArrayOutput() NetworkAssignIpv4ArrayOutput
	ToNetworkAssignIpv4ArrayOutputWithContext(context.Context) NetworkAssignIpv4ArrayOutput
}

type NetworkAssignIpv4Array []NetworkAssignIpv4Input

func (NetworkAssignIpv4Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkAssignIpv4)(nil)).Elem()
}

func (i NetworkAssignIpv4Array) ToNetworkAssignIpv4ArrayOutput() NetworkAssignIpv4ArrayOutput {
	return i.ToNetworkAssignIpv4ArrayOutputWithContext(context.Background())
}

func (i NetworkAssignIpv4Array) ToNetworkAssignIpv4ArrayOutputWithContext(ctx context.Context) NetworkAssignIpv4ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkAssignIpv4ArrayOutput)
}

type NetworkAssignIpv4Output struct{ *pulumi.OutputState }

func (NetworkAssignIpv4Output) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkAssignIpv4)(nil)).Elem()
}

func (o NetworkAssignIpv4Output) ToNetworkAssignIpv4Output() NetworkAssignIpv4Output {
	return o
}

func (o NetworkAssignIpv4Output) ToNetworkAssignIpv4OutputWithContext(ctx context.Context) NetworkAssignIpv4Output {
	return o
}

func (o NetworkAssignIpv4Output) Zerotier() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworkAssignIpv4) *bool { return v.Zerotier }).(pulumi.BoolPtrOutput)
}

type NetworkAssignIpv4ArrayOutput struct{ *pulumi.OutputState }

func (NetworkAssignIpv4ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkAssignIpv4)(nil)).Elem()
}

func (o NetworkAssignIpv4ArrayOutput) ToNetworkAssignIpv4ArrayOutput() NetworkAssignIpv4ArrayOutput {
	return o
}

func (o NetworkAssignIpv4ArrayOutput) ToNetworkAssignIpv4ArrayOutputWithContext(ctx context.Context) NetworkAssignIpv4ArrayOutput {
	return o
}

func (o NetworkAssignIpv4ArrayOutput) Index(i pulumi.IntInput) NetworkAssignIpv4Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworkAssignIpv4 {
		return vs[0].([]NetworkAssignIpv4)[vs[1].(int)]
	}).(NetworkAssignIpv4Output)
}

type NetworkAssignIpv6 struct {
	Rfc4193  *bool `pulumi:"rfc4193"`
	Sixplane *bool `pulumi:"sixplane"`
	Zerotier *bool `pulumi:"zerotier"`
}

// NetworkAssignIpv6Input is an input type that accepts NetworkAssignIpv6Args and NetworkAssignIpv6Output values.
// You can construct a concrete instance of `NetworkAssignIpv6Input` via:
//
//          NetworkAssignIpv6Args{...}
type NetworkAssignIpv6Input interface {
	pulumi.Input

	ToNetworkAssignIpv6Output() NetworkAssignIpv6Output
	ToNetworkAssignIpv6OutputWithContext(context.Context) NetworkAssignIpv6Output
}

type NetworkAssignIpv6Args struct {
	Rfc4193  pulumi.BoolPtrInput `pulumi:"rfc4193"`
	Sixplane pulumi.BoolPtrInput `pulumi:"sixplane"`
	Zerotier pulumi.BoolPtrInput `pulumi:"zerotier"`
}

func (NetworkAssignIpv6Args) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkAssignIpv6)(nil)).Elem()
}

func (i NetworkAssignIpv6Args) ToNetworkAssignIpv6Output() NetworkAssignIpv6Output {
	return i.ToNetworkAssignIpv6OutputWithContext(context.Background())
}

func (i NetworkAssignIpv6Args) ToNetworkAssignIpv6OutputWithContext(ctx context.Context) NetworkAssignIpv6Output {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkAssignIpv6Output)
}

// NetworkAssignIpv6ArrayInput is an input type that accepts NetworkAssignIpv6Array and NetworkAssignIpv6ArrayOutput values.
// You can construct a concrete instance of `NetworkAssignIpv6ArrayInput` via:
//
//          NetworkAssignIpv6Array{ NetworkAssignIpv6Args{...} }
type NetworkAssignIpv6ArrayInput interface {
	pulumi.Input

	ToNetworkAssignIpv6ArrayOutput() NetworkAssignIpv6ArrayOutput
	ToNetworkAssignIpv6ArrayOutputWithContext(context.Context) NetworkAssignIpv6ArrayOutput
}

type NetworkAssignIpv6Array []NetworkAssignIpv6Input

func (NetworkAssignIpv6Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkAssignIpv6)(nil)).Elem()
}

func (i NetworkAssignIpv6Array) ToNetworkAssignIpv6ArrayOutput() NetworkAssignIpv6ArrayOutput {
	return i.ToNetworkAssignIpv6ArrayOutputWithContext(context.Background())
}

func (i NetworkAssignIpv6Array) ToNetworkAssignIpv6ArrayOutputWithContext(ctx context.Context) NetworkAssignIpv6ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkAssignIpv6ArrayOutput)
}

type NetworkAssignIpv6Output struct{ *pulumi.OutputState }

func (NetworkAssignIpv6Output) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkAssignIpv6)(nil)).Elem()
}

func (o NetworkAssignIpv6Output) ToNetworkAssignIpv6Output() NetworkAssignIpv6Output {
	return o
}

func (o NetworkAssignIpv6Output) ToNetworkAssignIpv6OutputWithContext(ctx context.Context) NetworkAssignIpv6Output {
	return o
}

func (o NetworkAssignIpv6Output) Rfc4193() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworkAssignIpv6) *bool { return v.Rfc4193 }).(pulumi.BoolPtrOutput)
}

func (o NetworkAssignIpv6Output) Sixplane() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworkAssignIpv6) *bool { return v.Sixplane }).(pulumi.BoolPtrOutput)
}

func (o NetworkAssignIpv6Output) Zerotier() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworkAssignIpv6) *bool { return v.Zerotier }).(pulumi.BoolPtrOutput)
}

type NetworkAssignIpv6ArrayOutput struct{ *pulumi.OutputState }

func (NetworkAssignIpv6ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkAssignIpv6)(nil)).Elem()
}

func (o NetworkAssignIpv6ArrayOutput) ToNetworkAssignIpv6ArrayOutput() NetworkAssignIpv6ArrayOutput {
	return o
}

func (o NetworkAssignIpv6ArrayOutput) ToNetworkAssignIpv6ArrayOutputWithContext(ctx context.Context) NetworkAssignIpv6ArrayOutput {
	return o
}

func (o NetworkAssignIpv6ArrayOutput) Index(i pulumi.IntInput) NetworkAssignIpv6Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworkAssignIpv6 {
		return vs[0].([]NetworkAssignIpv6)[vs[1].(int)]
	}).(NetworkAssignIpv6Output)
}

type NetworkAssignmentPool struct {
	// The last address in the assignment rule. This must be the highest number in the pool. end must also be accompanied by start.
	End *string `pulumi:"end"`
	// The first address in the assignment rule. This must be the lowest number in the pool. `start` must also be accompanied by `end`.
	Start *string `pulumi:"start"`
}

// NetworkAssignmentPoolInput is an input type that accepts NetworkAssignmentPoolArgs and NetworkAssignmentPoolOutput values.
// You can construct a concrete instance of `NetworkAssignmentPoolInput` via:
//
//          NetworkAssignmentPoolArgs{...}
type NetworkAssignmentPoolInput interface {
	pulumi.Input

	ToNetworkAssignmentPoolOutput() NetworkAssignmentPoolOutput
	ToNetworkAssignmentPoolOutputWithContext(context.Context) NetworkAssignmentPoolOutput
}

type NetworkAssignmentPoolArgs struct {
	// The last address in the assignment rule. This must be the highest number in the pool. end must also be accompanied by start.
	End pulumi.StringPtrInput `pulumi:"end"`
	// The first address in the assignment rule. This must be the lowest number in the pool. `start` must also be accompanied by `end`.
	Start pulumi.StringPtrInput `pulumi:"start"`
}

func (NetworkAssignmentPoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkAssignmentPool)(nil)).Elem()
}

func (i NetworkAssignmentPoolArgs) ToNetworkAssignmentPoolOutput() NetworkAssignmentPoolOutput {
	return i.ToNetworkAssignmentPoolOutputWithContext(context.Background())
}

func (i NetworkAssignmentPoolArgs) ToNetworkAssignmentPoolOutputWithContext(ctx context.Context) NetworkAssignmentPoolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkAssignmentPoolOutput)
}

// NetworkAssignmentPoolArrayInput is an input type that accepts NetworkAssignmentPoolArray and NetworkAssignmentPoolArrayOutput values.
// You can construct a concrete instance of `NetworkAssignmentPoolArrayInput` via:
//
//          NetworkAssignmentPoolArray{ NetworkAssignmentPoolArgs{...} }
type NetworkAssignmentPoolArrayInput interface {
	pulumi.Input

	ToNetworkAssignmentPoolArrayOutput() NetworkAssignmentPoolArrayOutput
	ToNetworkAssignmentPoolArrayOutputWithContext(context.Context) NetworkAssignmentPoolArrayOutput
}

type NetworkAssignmentPoolArray []NetworkAssignmentPoolInput

func (NetworkAssignmentPoolArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkAssignmentPool)(nil)).Elem()
}

func (i NetworkAssignmentPoolArray) ToNetworkAssignmentPoolArrayOutput() NetworkAssignmentPoolArrayOutput {
	return i.ToNetworkAssignmentPoolArrayOutputWithContext(context.Background())
}

func (i NetworkAssignmentPoolArray) ToNetworkAssignmentPoolArrayOutputWithContext(ctx context.Context) NetworkAssignmentPoolArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkAssignmentPoolArrayOutput)
}

type NetworkAssignmentPoolOutput struct{ *pulumi.OutputState }

func (NetworkAssignmentPoolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkAssignmentPool)(nil)).Elem()
}

func (o NetworkAssignmentPoolOutput) ToNetworkAssignmentPoolOutput() NetworkAssignmentPoolOutput {
	return o
}

func (o NetworkAssignmentPoolOutput) ToNetworkAssignmentPoolOutputWithContext(ctx context.Context) NetworkAssignmentPoolOutput {
	return o
}

// The last address in the assignment rule. This must be the highest number in the pool. end must also be accompanied by start.
func (o NetworkAssignmentPoolOutput) End() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkAssignmentPool) *string { return v.End }).(pulumi.StringPtrOutput)
}

// The first address in the assignment rule. This must be the lowest number in the pool. `start` must also be accompanied by `end`.
func (o NetworkAssignmentPoolOutput) Start() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkAssignmentPool) *string { return v.Start }).(pulumi.StringPtrOutput)
}

type NetworkAssignmentPoolArrayOutput struct{ *pulumi.OutputState }

func (NetworkAssignmentPoolArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkAssignmentPool)(nil)).Elem()
}

func (o NetworkAssignmentPoolArrayOutput) ToNetworkAssignmentPoolArrayOutput() NetworkAssignmentPoolArrayOutput {
	return o
}

func (o NetworkAssignmentPoolArrayOutput) ToNetworkAssignmentPoolArrayOutputWithContext(ctx context.Context) NetworkAssignmentPoolArrayOutput {
	return o
}

func (o NetworkAssignmentPoolArrayOutput) Index(i pulumi.IntInput) NetworkAssignmentPoolOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworkAssignmentPool {
		return vs[0].([]NetworkAssignmentPool)[vs[1].(int)]
	}).(NetworkAssignmentPoolOutput)
}

type NetworkRoute struct {
	// Network to route for
	Target string `pulumi:"target"`
	// Gateway address
	Via *string `pulumi:"via"`
}

// NetworkRouteInput is an input type that accepts NetworkRouteArgs and NetworkRouteOutput values.
// You can construct a concrete instance of `NetworkRouteInput` via:
//
//          NetworkRouteArgs{...}
type NetworkRouteInput interface {
	pulumi.Input

	ToNetworkRouteOutput() NetworkRouteOutput
	ToNetworkRouteOutputWithContext(context.Context) NetworkRouteOutput
}

type NetworkRouteArgs struct {
	// Network to route for
	Target pulumi.StringInput `pulumi:"target"`
	// Gateway address
	Via pulumi.StringPtrInput `pulumi:"via"`
}

func (NetworkRouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkRoute)(nil)).Elem()
}

func (i NetworkRouteArgs) ToNetworkRouteOutput() NetworkRouteOutput {
	return i.ToNetworkRouteOutputWithContext(context.Background())
}

func (i NetworkRouteArgs) ToNetworkRouteOutputWithContext(ctx context.Context) NetworkRouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkRouteOutput)
}

// NetworkRouteArrayInput is an input type that accepts NetworkRouteArray and NetworkRouteArrayOutput values.
// You can construct a concrete instance of `NetworkRouteArrayInput` via:
//
//          NetworkRouteArray{ NetworkRouteArgs{...} }
type NetworkRouteArrayInput interface {
	pulumi.Input

	ToNetworkRouteArrayOutput() NetworkRouteArrayOutput
	ToNetworkRouteArrayOutputWithContext(context.Context) NetworkRouteArrayOutput
}

type NetworkRouteArray []NetworkRouteInput

func (NetworkRouteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkRoute)(nil)).Elem()
}

func (i NetworkRouteArray) ToNetworkRouteArrayOutput() NetworkRouteArrayOutput {
	return i.ToNetworkRouteArrayOutputWithContext(context.Background())
}

func (i NetworkRouteArray) ToNetworkRouteArrayOutputWithContext(ctx context.Context) NetworkRouteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkRouteArrayOutput)
}

type NetworkRouteOutput struct{ *pulumi.OutputState }

func (NetworkRouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkRoute)(nil)).Elem()
}

func (o NetworkRouteOutput) ToNetworkRouteOutput() NetworkRouteOutput {
	return o
}

func (o NetworkRouteOutput) ToNetworkRouteOutputWithContext(ctx context.Context) NetworkRouteOutput {
	return o
}

// Network to route for
func (o NetworkRouteOutput) Target() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkRoute) string { return v.Target }).(pulumi.StringOutput)
}

// Gateway address
func (o NetworkRouteOutput) Via() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkRoute) *string { return v.Via }).(pulumi.StringPtrOutput)
}

type NetworkRouteArrayOutput struct{ *pulumi.OutputState }

func (NetworkRouteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkRoute)(nil)).Elem()
}

func (o NetworkRouteArrayOutput) ToNetworkRouteArrayOutput() NetworkRouteArrayOutput {
	return o
}

func (o NetworkRouteArrayOutput) ToNetworkRouteArrayOutputWithContext(ctx context.Context) NetworkRouteArrayOutput {
	return o
}

func (o NetworkRouteArrayOutput) Index(i pulumi.IntInput) NetworkRouteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworkRoute {
		return vs[0].([]NetworkRoute)[vs[1].(int)]
	}).(NetworkRouteOutput)
}

type GetNetworkAssignIpv4 struct {
	Zerotier *bool `pulumi:"zerotier"`
}

// GetNetworkAssignIpv4Input is an input type that accepts GetNetworkAssignIpv4Args and GetNetworkAssignIpv4Output values.
// You can construct a concrete instance of `GetNetworkAssignIpv4Input` via:
//
//          GetNetworkAssignIpv4Args{...}
type GetNetworkAssignIpv4Input interface {
	pulumi.Input

	ToGetNetworkAssignIpv4Output() GetNetworkAssignIpv4Output
	ToGetNetworkAssignIpv4OutputWithContext(context.Context) GetNetworkAssignIpv4Output
}

type GetNetworkAssignIpv4Args struct {
	Zerotier pulumi.BoolPtrInput `pulumi:"zerotier"`
}

func (GetNetworkAssignIpv4Args) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNetworkAssignIpv4)(nil)).Elem()
}

func (i GetNetworkAssignIpv4Args) ToGetNetworkAssignIpv4Output() GetNetworkAssignIpv4Output {
	return i.ToGetNetworkAssignIpv4OutputWithContext(context.Background())
}

func (i GetNetworkAssignIpv4Args) ToGetNetworkAssignIpv4OutputWithContext(ctx context.Context) GetNetworkAssignIpv4Output {
	return pulumi.ToOutputWithContext(ctx, i).(GetNetworkAssignIpv4Output)
}

// GetNetworkAssignIpv4ArrayInput is an input type that accepts GetNetworkAssignIpv4Array and GetNetworkAssignIpv4ArrayOutput values.
// You can construct a concrete instance of `GetNetworkAssignIpv4ArrayInput` via:
//
//          GetNetworkAssignIpv4Array{ GetNetworkAssignIpv4Args{...} }
type GetNetworkAssignIpv4ArrayInput interface {
	pulumi.Input

	ToGetNetworkAssignIpv4ArrayOutput() GetNetworkAssignIpv4ArrayOutput
	ToGetNetworkAssignIpv4ArrayOutputWithContext(context.Context) GetNetworkAssignIpv4ArrayOutput
}

type GetNetworkAssignIpv4Array []GetNetworkAssignIpv4Input

func (GetNetworkAssignIpv4Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNetworkAssignIpv4)(nil)).Elem()
}

func (i GetNetworkAssignIpv4Array) ToGetNetworkAssignIpv4ArrayOutput() GetNetworkAssignIpv4ArrayOutput {
	return i.ToGetNetworkAssignIpv4ArrayOutputWithContext(context.Background())
}

func (i GetNetworkAssignIpv4Array) ToGetNetworkAssignIpv4ArrayOutputWithContext(ctx context.Context) GetNetworkAssignIpv4ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNetworkAssignIpv4ArrayOutput)
}

type GetNetworkAssignIpv4Output struct{ *pulumi.OutputState }

func (GetNetworkAssignIpv4Output) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNetworkAssignIpv4)(nil)).Elem()
}

func (o GetNetworkAssignIpv4Output) ToGetNetworkAssignIpv4Output() GetNetworkAssignIpv4Output {
	return o
}

func (o GetNetworkAssignIpv4Output) ToGetNetworkAssignIpv4OutputWithContext(ctx context.Context) GetNetworkAssignIpv4Output {
	return o
}

func (o GetNetworkAssignIpv4Output) Zerotier() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetNetworkAssignIpv4) *bool { return v.Zerotier }).(pulumi.BoolPtrOutput)
}

type GetNetworkAssignIpv4ArrayOutput struct{ *pulumi.OutputState }

func (GetNetworkAssignIpv4ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNetworkAssignIpv4)(nil)).Elem()
}

func (o GetNetworkAssignIpv4ArrayOutput) ToGetNetworkAssignIpv4ArrayOutput() GetNetworkAssignIpv4ArrayOutput {
	return o
}

func (o GetNetworkAssignIpv4ArrayOutput) ToGetNetworkAssignIpv4ArrayOutputWithContext(ctx context.Context) GetNetworkAssignIpv4ArrayOutput {
	return o
}

func (o GetNetworkAssignIpv4ArrayOutput) Index(i pulumi.IntInput) GetNetworkAssignIpv4Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetNetworkAssignIpv4 {
		return vs[0].([]GetNetworkAssignIpv4)[vs[1].(int)]
	}).(GetNetworkAssignIpv4Output)
}

type GetNetworkAssignIpv6 struct {
	Rfc4193  *bool `pulumi:"rfc4193"`
	Sixplane *bool `pulumi:"sixplane"`
	Zerotier *bool `pulumi:"zerotier"`
}

// GetNetworkAssignIpv6Input is an input type that accepts GetNetworkAssignIpv6Args and GetNetworkAssignIpv6Output values.
// You can construct a concrete instance of `GetNetworkAssignIpv6Input` via:
//
//          GetNetworkAssignIpv6Args{...}
type GetNetworkAssignIpv6Input interface {
	pulumi.Input

	ToGetNetworkAssignIpv6Output() GetNetworkAssignIpv6Output
	ToGetNetworkAssignIpv6OutputWithContext(context.Context) GetNetworkAssignIpv6Output
}

type GetNetworkAssignIpv6Args struct {
	Rfc4193  pulumi.BoolPtrInput `pulumi:"rfc4193"`
	Sixplane pulumi.BoolPtrInput `pulumi:"sixplane"`
	Zerotier pulumi.BoolPtrInput `pulumi:"zerotier"`
}

func (GetNetworkAssignIpv6Args) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNetworkAssignIpv6)(nil)).Elem()
}

func (i GetNetworkAssignIpv6Args) ToGetNetworkAssignIpv6Output() GetNetworkAssignIpv6Output {
	return i.ToGetNetworkAssignIpv6OutputWithContext(context.Background())
}

func (i GetNetworkAssignIpv6Args) ToGetNetworkAssignIpv6OutputWithContext(ctx context.Context) GetNetworkAssignIpv6Output {
	return pulumi.ToOutputWithContext(ctx, i).(GetNetworkAssignIpv6Output)
}

// GetNetworkAssignIpv6ArrayInput is an input type that accepts GetNetworkAssignIpv6Array and GetNetworkAssignIpv6ArrayOutput values.
// You can construct a concrete instance of `GetNetworkAssignIpv6ArrayInput` via:
//
//          GetNetworkAssignIpv6Array{ GetNetworkAssignIpv6Args{...} }
type GetNetworkAssignIpv6ArrayInput interface {
	pulumi.Input

	ToGetNetworkAssignIpv6ArrayOutput() GetNetworkAssignIpv6ArrayOutput
	ToGetNetworkAssignIpv6ArrayOutputWithContext(context.Context) GetNetworkAssignIpv6ArrayOutput
}

type GetNetworkAssignIpv6Array []GetNetworkAssignIpv6Input

func (GetNetworkAssignIpv6Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNetworkAssignIpv6)(nil)).Elem()
}

func (i GetNetworkAssignIpv6Array) ToGetNetworkAssignIpv6ArrayOutput() GetNetworkAssignIpv6ArrayOutput {
	return i.ToGetNetworkAssignIpv6ArrayOutputWithContext(context.Background())
}

func (i GetNetworkAssignIpv6Array) ToGetNetworkAssignIpv6ArrayOutputWithContext(ctx context.Context) GetNetworkAssignIpv6ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNetworkAssignIpv6ArrayOutput)
}

type GetNetworkAssignIpv6Output struct{ *pulumi.OutputState }

func (GetNetworkAssignIpv6Output) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNetworkAssignIpv6)(nil)).Elem()
}

func (o GetNetworkAssignIpv6Output) ToGetNetworkAssignIpv6Output() GetNetworkAssignIpv6Output {
	return o
}

func (o GetNetworkAssignIpv6Output) ToGetNetworkAssignIpv6OutputWithContext(ctx context.Context) GetNetworkAssignIpv6Output {
	return o
}

func (o GetNetworkAssignIpv6Output) Rfc4193() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetNetworkAssignIpv6) *bool { return v.Rfc4193 }).(pulumi.BoolPtrOutput)
}

func (o GetNetworkAssignIpv6Output) Sixplane() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetNetworkAssignIpv6) *bool { return v.Sixplane }).(pulumi.BoolPtrOutput)
}

func (o GetNetworkAssignIpv6Output) Zerotier() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetNetworkAssignIpv6) *bool { return v.Zerotier }).(pulumi.BoolPtrOutput)
}

type GetNetworkAssignIpv6ArrayOutput struct{ *pulumi.OutputState }

func (GetNetworkAssignIpv6ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNetworkAssignIpv6)(nil)).Elem()
}

func (o GetNetworkAssignIpv6ArrayOutput) ToGetNetworkAssignIpv6ArrayOutput() GetNetworkAssignIpv6ArrayOutput {
	return o
}

func (o GetNetworkAssignIpv6ArrayOutput) ToGetNetworkAssignIpv6ArrayOutputWithContext(ctx context.Context) GetNetworkAssignIpv6ArrayOutput {
	return o
}

func (o GetNetworkAssignIpv6ArrayOutput) Index(i pulumi.IntInput) GetNetworkAssignIpv6Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetNetworkAssignIpv6 {
		return vs[0].([]GetNetworkAssignIpv6)[vs[1].(int)]
	}).(GetNetworkAssignIpv6Output)
}

type GetNetworkAssignmentPool struct {
	End   *string `pulumi:"end"`
	Start *string `pulumi:"start"`
}

// GetNetworkAssignmentPoolInput is an input type that accepts GetNetworkAssignmentPoolArgs and GetNetworkAssignmentPoolOutput values.
// You can construct a concrete instance of `GetNetworkAssignmentPoolInput` via:
//
//          GetNetworkAssignmentPoolArgs{...}
type GetNetworkAssignmentPoolInput interface {
	pulumi.Input

	ToGetNetworkAssignmentPoolOutput() GetNetworkAssignmentPoolOutput
	ToGetNetworkAssignmentPoolOutputWithContext(context.Context) GetNetworkAssignmentPoolOutput
}

type GetNetworkAssignmentPoolArgs struct {
	End   pulumi.StringPtrInput `pulumi:"end"`
	Start pulumi.StringPtrInput `pulumi:"start"`
}

func (GetNetworkAssignmentPoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNetworkAssignmentPool)(nil)).Elem()
}

func (i GetNetworkAssignmentPoolArgs) ToGetNetworkAssignmentPoolOutput() GetNetworkAssignmentPoolOutput {
	return i.ToGetNetworkAssignmentPoolOutputWithContext(context.Background())
}

func (i GetNetworkAssignmentPoolArgs) ToGetNetworkAssignmentPoolOutputWithContext(ctx context.Context) GetNetworkAssignmentPoolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNetworkAssignmentPoolOutput)
}

// GetNetworkAssignmentPoolArrayInput is an input type that accepts GetNetworkAssignmentPoolArray and GetNetworkAssignmentPoolArrayOutput values.
// You can construct a concrete instance of `GetNetworkAssignmentPoolArrayInput` via:
//
//          GetNetworkAssignmentPoolArray{ GetNetworkAssignmentPoolArgs{...} }
type GetNetworkAssignmentPoolArrayInput interface {
	pulumi.Input

	ToGetNetworkAssignmentPoolArrayOutput() GetNetworkAssignmentPoolArrayOutput
	ToGetNetworkAssignmentPoolArrayOutputWithContext(context.Context) GetNetworkAssignmentPoolArrayOutput
}

type GetNetworkAssignmentPoolArray []GetNetworkAssignmentPoolInput

func (GetNetworkAssignmentPoolArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNetworkAssignmentPool)(nil)).Elem()
}

func (i GetNetworkAssignmentPoolArray) ToGetNetworkAssignmentPoolArrayOutput() GetNetworkAssignmentPoolArrayOutput {
	return i.ToGetNetworkAssignmentPoolArrayOutputWithContext(context.Background())
}

func (i GetNetworkAssignmentPoolArray) ToGetNetworkAssignmentPoolArrayOutputWithContext(ctx context.Context) GetNetworkAssignmentPoolArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNetworkAssignmentPoolArrayOutput)
}

type GetNetworkAssignmentPoolOutput struct{ *pulumi.OutputState }

func (GetNetworkAssignmentPoolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNetworkAssignmentPool)(nil)).Elem()
}

func (o GetNetworkAssignmentPoolOutput) ToGetNetworkAssignmentPoolOutput() GetNetworkAssignmentPoolOutput {
	return o
}

func (o GetNetworkAssignmentPoolOutput) ToGetNetworkAssignmentPoolOutputWithContext(ctx context.Context) GetNetworkAssignmentPoolOutput {
	return o
}

func (o GetNetworkAssignmentPoolOutput) End() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetNetworkAssignmentPool) *string { return v.End }).(pulumi.StringPtrOutput)
}

func (o GetNetworkAssignmentPoolOutput) Start() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetNetworkAssignmentPool) *string { return v.Start }).(pulumi.StringPtrOutput)
}

type GetNetworkAssignmentPoolArrayOutput struct{ *pulumi.OutputState }

func (GetNetworkAssignmentPoolArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNetworkAssignmentPool)(nil)).Elem()
}

func (o GetNetworkAssignmentPoolArrayOutput) ToGetNetworkAssignmentPoolArrayOutput() GetNetworkAssignmentPoolArrayOutput {
	return o
}

func (o GetNetworkAssignmentPoolArrayOutput) ToGetNetworkAssignmentPoolArrayOutputWithContext(ctx context.Context) GetNetworkAssignmentPoolArrayOutput {
	return o
}

func (o GetNetworkAssignmentPoolArrayOutput) Index(i pulumi.IntInput) GetNetworkAssignmentPoolOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetNetworkAssignmentPool {
		return vs[0].([]GetNetworkAssignmentPool)[vs[1].(int)]
	}).(GetNetworkAssignmentPoolOutput)
}

type GetNetworkRoute struct {
	Target string  `pulumi:"target"`
	Via    *string `pulumi:"via"`
}

// GetNetworkRouteInput is an input type that accepts GetNetworkRouteArgs and GetNetworkRouteOutput values.
// You can construct a concrete instance of `GetNetworkRouteInput` via:
//
//          GetNetworkRouteArgs{...}
type GetNetworkRouteInput interface {
	pulumi.Input

	ToGetNetworkRouteOutput() GetNetworkRouteOutput
	ToGetNetworkRouteOutputWithContext(context.Context) GetNetworkRouteOutput
}

type GetNetworkRouteArgs struct {
	Target pulumi.StringInput    `pulumi:"target"`
	Via    pulumi.StringPtrInput `pulumi:"via"`
}

func (GetNetworkRouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNetworkRoute)(nil)).Elem()
}

func (i GetNetworkRouteArgs) ToGetNetworkRouteOutput() GetNetworkRouteOutput {
	return i.ToGetNetworkRouteOutputWithContext(context.Background())
}

func (i GetNetworkRouteArgs) ToGetNetworkRouteOutputWithContext(ctx context.Context) GetNetworkRouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNetworkRouteOutput)
}

// GetNetworkRouteArrayInput is an input type that accepts GetNetworkRouteArray and GetNetworkRouteArrayOutput values.
// You can construct a concrete instance of `GetNetworkRouteArrayInput` via:
//
//          GetNetworkRouteArray{ GetNetworkRouteArgs{...} }
type GetNetworkRouteArrayInput interface {
	pulumi.Input

	ToGetNetworkRouteArrayOutput() GetNetworkRouteArrayOutput
	ToGetNetworkRouteArrayOutputWithContext(context.Context) GetNetworkRouteArrayOutput
}

type GetNetworkRouteArray []GetNetworkRouteInput

func (GetNetworkRouteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNetworkRoute)(nil)).Elem()
}

func (i GetNetworkRouteArray) ToGetNetworkRouteArrayOutput() GetNetworkRouteArrayOutput {
	return i.ToGetNetworkRouteArrayOutputWithContext(context.Background())
}

func (i GetNetworkRouteArray) ToGetNetworkRouteArrayOutputWithContext(ctx context.Context) GetNetworkRouteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNetworkRouteArrayOutput)
}

type GetNetworkRouteOutput struct{ *pulumi.OutputState }

func (GetNetworkRouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNetworkRoute)(nil)).Elem()
}

func (o GetNetworkRouteOutput) ToGetNetworkRouteOutput() GetNetworkRouteOutput {
	return o
}

func (o GetNetworkRouteOutput) ToGetNetworkRouteOutputWithContext(ctx context.Context) GetNetworkRouteOutput {
	return o
}

func (o GetNetworkRouteOutput) Target() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkRoute) string { return v.Target }).(pulumi.StringOutput)
}

func (o GetNetworkRouteOutput) Via() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetNetworkRoute) *string { return v.Via }).(pulumi.StringPtrOutput)
}

type GetNetworkRouteArrayOutput struct{ *pulumi.OutputState }

func (GetNetworkRouteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNetworkRoute)(nil)).Elem()
}

func (o GetNetworkRouteArrayOutput) ToGetNetworkRouteArrayOutput() GetNetworkRouteArrayOutput {
	return o
}

func (o GetNetworkRouteArrayOutput) ToGetNetworkRouteArrayOutputWithContext(ctx context.Context) GetNetworkRouteArrayOutput {
	return o
}

func (o GetNetworkRouteArrayOutput) Index(i pulumi.IntInput) GetNetworkRouteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetNetworkRoute {
		return vs[0].([]GetNetworkRoute)[vs[1].(int)]
	}).(GetNetworkRouteOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkAssignIpv4Input)(nil)).Elem(), NetworkAssignIpv4Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkAssignIpv4ArrayInput)(nil)).Elem(), NetworkAssignIpv4Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkAssignIpv6Input)(nil)).Elem(), NetworkAssignIpv6Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkAssignIpv6ArrayInput)(nil)).Elem(), NetworkAssignIpv6Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkAssignmentPoolInput)(nil)).Elem(), NetworkAssignmentPoolArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkAssignmentPoolArrayInput)(nil)).Elem(), NetworkAssignmentPoolArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkRouteInput)(nil)).Elem(), NetworkRouteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkRouteArrayInput)(nil)).Elem(), NetworkRouteArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNetworkAssignIpv4Input)(nil)).Elem(), GetNetworkAssignIpv4Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNetworkAssignIpv4ArrayInput)(nil)).Elem(), GetNetworkAssignIpv4Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNetworkAssignIpv6Input)(nil)).Elem(), GetNetworkAssignIpv6Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNetworkAssignIpv6ArrayInput)(nil)).Elem(), GetNetworkAssignIpv6Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNetworkAssignmentPoolInput)(nil)).Elem(), GetNetworkAssignmentPoolArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNetworkAssignmentPoolArrayInput)(nil)).Elem(), GetNetworkAssignmentPoolArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNetworkRouteInput)(nil)).Elem(), GetNetworkRouteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNetworkRouteArrayInput)(nil)).Elem(), GetNetworkRouteArray{})
	pulumi.RegisterOutputType(NetworkAssignIpv4Output{})
	pulumi.RegisterOutputType(NetworkAssignIpv4ArrayOutput{})
	pulumi.RegisterOutputType(NetworkAssignIpv6Output{})
	pulumi.RegisterOutputType(NetworkAssignIpv6ArrayOutput{})
	pulumi.RegisterOutputType(NetworkAssignmentPoolOutput{})
	pulumi.RegisterOutputType(NetworkAssignmentPoolArrayOutput{})
	pulumi.RegisterOutputType(NetworkRouteOutput{})
	pulumi.RegisterOutputType(NetworkRouteArrayOutput{})
	pulumi.RegisterOutputType(GetNetworkAssignIpv4Output{})
	pulumi.RegisterOutputType(GetNetworkAssignIpv4ArrayOutput{})
	pulumi.RegisterOutputType(GetNetworkAssignIpv6Output{})
	pulumi.RegisterOutputType(GetNetworkAssignIpv6ArrayOutput{})
	pulumi.RegisterOutputType(GetNetworkAssignmentPoolOutput{})
	pulumi.RegisterOutputType(GetNetworkAssignmentPoolArrayOutput{})
	pulumi.RegisterOutputType(GetNetworkRouteOutput{})
	pulumi.RegisterOutputType(GetNetworkRouteArrayOutput{})
}
