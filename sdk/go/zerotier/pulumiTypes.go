// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package zerotier

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type NetworkAssignIpv4 struct {
	Zerotier *bool `pulumi:"zerotier"`
}

// NetworkAssignIpv4Input is an input type that accepts NetworkAssignIpv4Args and NetworkAssignIpv4Output values.
// You can construct a concrete instance of `NetworkAssignIpv4Input` via:
//
//          NetworkAssignIpv4Args{...}
type NetworkAssignIpv4Input interface {
	pulumi.Input

	ToNetworkAssignIpv4Output() NetworkAssignIpv4Output
	ToNetworkAssignIpv4OutputWithContext(context.Context) NetworkAssignIpv4Output
}

type NetworkAssignIpv4Args struct {
	Zerotier pulumi.BoolPtrInput `pulumi:"zerotier"`
}

func (NetworkAssignIpv4Args) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkAssignIpv4)(nil)).Elem()
}

func (i NetworkAssignIpv4Args) ToNetworkAssignIpv4Output() NetworkAssignIpv4Output {
	return i.ToNetworkAssignIpv4OutputWithContext(context.Background())
}

func (i NetworkAssignIpv4Args) ToNetworkAssignIpv4OutputWithContext(ctx context.Context) NetworkAssignIpv4Output {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkAssignIpv4Output)
}

// NetworkAssignIpv4ArrayInput is an input type that accepts NetworkAssignIpv4Array and NetworkAssignIpv4ArrayOutput values.
// You can construct a concrete instance of `NetworkAssignIpv4ArrayInput` via:
//
//          NetworkAssignIpv4Array{ NetworkAssignIpv4Args{...} }
type NetworkAssignIpv4ArrayInput interface {
	pulumi.Input

	ToNetworkAssignIpv4ArrayOutput() NetworkAssignIpv4ArrayOutput
	ToNetworkAssignIpv4ArrayOutputWithContext(context.Context) NetworkAssignIpv4ArrayOutput
}

type NetworkAssignIpv4Array []NetworkAssignIpv4Input

func (NetworkAssignIpv4Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkAssignIpv4)(nil)).Elem()
}

func (i NetworkAssignIpv4Array) ToNetworkAssignIpv4ArrayOutput() NetworkAssignIpv4ArrayOutput {
	return i.ToNetworkAssignIpv4ArrayOutputWithContext(context.Background())
}

func (i NetworkAssignIpv4Array) ToNetworkAssignIpv4ArrayOutputWithContext(ctx context.Context) NetworkAssignIpv4ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkAssignIpv4ArrayOutput)
}

type NetworkAssignIpv4Output struct{ *pulumi.OutputState }

func (NetworkAssignIpv4Output) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkAssignIpv4)(nil)).Elem()
}

func (o NetworkAssignIpv4Output) ToNetworkAssignIpv4Output() NetworkAssignIpv4Output {
	return o
}

func (o NetworkAssignIpv4Output) ToNetworkAssignIpv4OutputWithContext(ctx context.Context) NetworkAssignIpv4Output {
	return o
}

func (o NetworkAssignIpv4Output) Zerotier() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworkAssignIpv4) *bool { return v.Zerotier }).(pulumi.BoolPtrOutput)
}

type NetworkAssignIpv4ArrayOutput struct{ *pulumi.OutputState }

func (NetworkAssignIpv4ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkAssignIpv4)(nil)).Elem()
}

func (o NetworkAssignIpv4ArrayOutput) ToNetworkAssignIpv4ArrayOutput() NetworkAssignIpv4ArrayOutput {
	return o
}

func (o NetworkAssignIpv4ArrayOutput) ToNetworkAssignIpv4ArrayOutputWithContext(ctx context.Context) NetworkAssignIpv4ArrayOutput {
	return o
}

func (o NetworkAssignIpv4ArrayOutput) Index(i pulumi.IntInput) NetworkAssignIpv4Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworkAssignIpv4 {
		return vs[0].([]NetworkAssignIpv4)[vs[1].(int)]
	}).(NetworkAssignIpv4Output)
}

type NetworkAssignIpv6 struct {
	Rfc4193  *bool `pulumi:"rfc4193"`
	Sixplane *bool `pulumi:"sixplane"`
	Zerotier *bool `pulumi:"zerotier"`
}

// NetworkAssignIpv6Input is an input type that accepts NetworkAssignIpv6Args and NetworkAssignIpv6Output values.
// You can construct a concrete instance of `NetworkAssignIpv6Input` via:
//
//          NetworkAssignIpv6Args{...}
type NetworkAssignIpv6Input interface {
	pulumi.Input

	ToNetworkAssignIpv6Output() NetworkAssignIpv6Output
	ToNetworkAssignIpv6OutputWithContext(context.Context) NetworkAssignIpv6Output
}

type NetworkAssignIpv6Args struct {
	Rfc4193  pulumi.BoolPtrInput `pulumi:"rfc4193"`
	Sixplane pulumi.BoolPtrInput `pulumi:"sixplane"`
	Zerotier pulumi.BoolPtrInput `pulumi:"zerotier"`
}

func (NetworkAssignIpv6Args) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkAssignIpv6)(nil)).Elem()
}

func (i NetworkAssignIpv6Args) ToNetworkAssignIpv6Output() NetworkAssignIpv6Output {
	return i.ToNetworkAssignIpv6OutputWithContext(context.Background())
}

func (i NetworkAssignIpv6Args) ToNetworkAssignIpv6OutputWithContext(ctx context.Context) NetworkAssignIpv6Output {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkAssignIpv6Output)
}

// NetworkAssignIpv6ArrayInput is an input type that accepts NetworkAssignIpv6Array and NetworkAssignIpv6ArrayOutput values.
// You can construct a concrete instance of `NetworkAssignIpv6ArrayInput` via:
//
//          NetworkAssignIpv6Array{ NetworkAssignIpv6Args{...} }
type NetworkAssignIpv6ArrayInput interface {
	pulumi.Input

	ToNetworkAssignIpv6ArrayOutput() NetworkAssignIpv6ArrayOutput
	ToNetworkAssignIpv6ArrayOutputWithContext(context.Context) NetworkAssignIpv6ArrayOutput
}

type NetworkAssignIpv6Array []NetworkAssignIpv6Input

func (NetworkAssignIpv6Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkAssignIpv6)(nil)).Elem()
}

func (i NetworkAssignIpv6Array) ToNetworkAssignIpv6ArrayOutput() NetworkAssignIpv6ArrayOutput {
	return i.ToNetworkAssignIpv6ArrayOutputWithContext(context.Background())
}

func (i NetworkAssignIpv6Array) ToNetworkAssignIpv6ArrayOutputWithContext(ctx context.Context) NetworkAssignIpv6ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkAssignIpv6ArrayOutput)
}

type NetworkAssignIpv6Output struct{ *pulumi.OutputState }

func (NetworkAssignIpv6Output) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkAssignIpv6)(nil)).Elem()
}

func (o NetworkAssignIpv6Output) ToNetworkAssignIpv6Output() NetworkAssignIpv6Output {
	return o
}

func (o NetworkAssignIpv6Output) ToNetworkAssignIpv6OutputWithContext(ctx context.Context) NetworkAssignIpv6Output {
	return o
}

func (o NetworkAssignIpv6Output) Rfc4193() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworkAssignIpv6) *bool { return v.Rfc4193 }).(pulumi.BoolPtrOutput)
}

func (o NetworkAssignIpv6Output) Sixplane() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworkAssignIpv6) *bool { return v.Sixplane }).(pulumi.BoolPtrOutput)
}

func (o NetworkAssignIpv6Output) Zerotier() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworkAssignIpv6) *bool { return v.Zerotier }).(pulumi.BoolPtrOutput)
}

type NetworkAssignIpv6ArrayOutput struct{ *pulumi.OutputState }

func (NetworkAssignIpv6ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkAssignIpv6)(nil)).Elem()
}

func (o NetworkAssignIpv6ArrayOutput) ToNetworkAssignIpv6ArrayOutput() NetworkAssignIpv6ArrayOutput {
	return o
}

func (o NetworkAssignIpv6ArrayOutput) ToNetworkAssignIpv6ArrayOutputWithContext(ctx context.Context) NetworkAssignIpv6ArrayOutput {
	return o
}

func (o NetworkAssignIpv6ArrayOutput) Index(i pulumi.IntInput) NetworkAssignIpv6Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworkAssignIpv6 {
		return vs[0].([]NetworkAssignIpv6)[vs[1].(int)]
	}).(NetworkAssignIpv6Output)
}

type NetworkAssignmentPool struct {
	// The last address in the assignment rule. This must be the highest number in the pool. end must also be accompanied by start.
	End *string `pulumi:"end"`
	// The first address in the assignment rule. This must be the lowest number in the pool. `start` must also be accompanied by `end`.
	Start *string `pulumi:"start"`
}

// NetworkAssignmentPoolInput is an input type that accepts NetworkAssignmentPoolArgs and NetworkAssignmentPoolOutput values.
// You can construct a concrete instance of `NetworkAssignmentPoolInput` via:
//
//          NetworkAssignmentPoolArgs{...}
type NetworkAssignmentPoolInput interface {
	pulumi.Input

	ToNetworkAssignmentPoolOutput() NetworkAssignmentPoolOutput
	ToNetworkAssignmentPoolOutputWithContext(context.Context) NetworkAssignmentPoolOutput
}

type NetworkAssignmentPoolArgs struct {
	// The last address in the assignment rule. This must be the highest number in the pool. end must also be accompanied by start.
	End pulumi.StringPtrInput `pulumi:"end"`
	// The first address in the assignment rule. This must be the lowest number in the pool. `start` must also be accompanied by `end`.
	Start pulumi.StringPtrInput `pulumi:"start"`
}

func (NetworkAssignmentPoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkAssignmentPool)(nil)).Elem()
}

func (i NetworkAssignmentPoolArgs) ToNetworkAssignmentPoolOutput() NetworkAssignmentPoolOutput {
	return i.ToNetworkAssignmentPoolOutputWithContext(context.Background())
}

func (i NetworkAssignmentPoolArgs) ToNetworkAssignmentPoolOutputWithContext(ctx context.Context) NetworkAssignmentPoolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkAssignmentPoolOutput)
}

// NetworkAssignmentPoolArrayInput is an input type that accepts NetworkAssignmentPoolArray and NetworkAssignmentPoolArrayOutput values.
// You can construct a concrete instance of `NetworkAssignmentPoolArrayInput` via:
//
//          NetworkAssignmentPoolArray{ NetworkAssignmentPoolArgs{...} }
type NetworkAssignmentPoolArrayInput interface {
	pulumi.Input

	ToNetworkAssignmentPoolArrayOutput() NetworkAssignmentPoolArrayOutput
	ToNetworkAssignmentPoolArrayOutputWithContext(context.Context) NetworkAssignmentPoolArrayOutput
}

type NetworkAssignmentPoolArray []NetworkAssignmentPoolInput

func (NetworkAssignmentPoolArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkAssignmentPool)(nil)).Elem()
}

func (i NetworkAssignmentPoolArray) ToNetworkAssignmentPoolArrayOutput() NetworkAssignmentPoolArrayOutput {
	return i.ToNetworkAssignmentPoolArrayOutputWithContext(context.Background())
}

func (i NetworkAssignmentPoolArray) ToNetworkAssignmentPoolArrayOutputWithContext(ctx context.Context) NetworkAssignmentPoolArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkAssignmentPoolArrayOutput)
}

type NetworkAssignmentPoolOutput struct{ *pulumi.OutputState }

func (NetworkAssignmentPoolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkAssignmentPool)(nil)).Elem()
}

func (o NetworkAssignmentPoolOutput) ToNetworkAssignmentPoolOutput() NetworkAssignmentPoolOutput {
	return o
}

func (o NetworkAssignmentPoolOutput) ToNetworkAssignmentPoolOutputWithContext(ctx context.Context) NetworkAssignmentPoolOutput {
	return o
}

// The last address in the assignment rule. This must be the highest number in the pool. end must also be accompanied by start.
func (o NetworkAssignmentPoolOutput) End() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkAssignmentPool) *string { return v.End }).(pulumi.StringPtrOutput)
}

// The first address in the assignment rule. This must be the lowest number in the pool. `start` must also be accompanied by `end`.
func (o NetworkAssignmentPoolOutput) Start() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkAssignmentPool) *string { return v.Start }).(pulumi.StringPtrOutput)
}

type NetworkAssignmentPoolArrayOutput struct{ *pulumi.OutputState }

func (NetworkAssignmentPoolArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkAssignmentPool)(nil)).Elem()
}

func (o NetworkAssignmentPoolArrayOutput) ToNetworkAssignmentPoolArrayOutput() NetworkAssignmentPoolArrayOutput {
	return o
}

func (o NetworkAssignmentPoolArrayOutput) ToNetworkAssignmentPoolArrayOutputWithContext(ctx context.Context) NetworkAssignmentPoolArrayOutput {
	return o
}

func (o NetworkAssignmentPoolArrayOutput) Index(i pulumi.IntInput) NetworkAssignmentPoolOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworkAssignmentPool {
		return vs[0].([]NetworkAssignmentPool)[vs[1].(int)]
	}).(NetworkAssignmentPoolOutput)
}

type NetworkRoute struct {
	// Network to route for
	Target string `pulumi:"target"`
	// Gateway address
	Via *string `pulumi:"via"`
}

// NetworkRouteInput is an input type that accepts NetworkRouteArgs and NetworkRouteOutput values.
// You can construct a concrete instance of `NetworkRouteInput` via:
//
//          NetworkRouteArgs{...}
type NetworkRouteInput interface {
	pulumi.Input

	ToNetworkRouteOutput() NetworkRouteOutput
	ToNetworkRouteOutputWithContext(context.Context) NetworkRouteOutput
}

type NetworkRouteArgs struct {
	// Network to route for
	Target pulumi.StringInput `pulumi:"target"`
	// Gateway address
	Via pulumi.StringPtrInput `pulumi:"via"`
}

func (NetworkRouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkRoute)(nil)).Elem()
}

func (i NetworkRouteArgs) ToNetworkRouteOutput() NetworkRouteOutput {
	return i.ToNetworkRouteOutputWithContext(context.Background())
}

func (i NetworkRouteArgs) ToNetworkRouteOutputWithContext(ctx context.Context) NetworkRouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkRouteOutput)
}

// NetworkRouteArrayInput is an input type that accepts NetworkRouteArray and NetworkRouteArrayOutput values.
// You can construct a concrete instance of `NetworkRouteArrayInput` via:
//
//          NetworkRouteArray{ NetworkRouteArgs{...} }
type NetworkRouteArrayInput interface {
	pulumi.Input

	ToNetworkRouteArrayOutput() NetworkRouteArrayOutput
	ToNetworkRouteArrayOutputWithContext(context.Context) NetworkRouteArrayOutput
}

type NetworkRouteArray []NetworkRouteInput

func (NetworkRouteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkRoute)(nil)).Elem()
}

func (i NetworkRouteArray) ToNetworkRouteArrayOutput() NetworkRouteArrayOutput {
	return i.ToNetworkRouteArrayOutputWithContext(context.Background())
}

func (i NetworkRouteArray) ToNetworkRouteArrayOutputWithContext(ctx context.Context) NetworkRouteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkRouteArrayOutput)
}

type NetworkRouteOutput struct{ *pulumi.OutputState }

func (NetworkRouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkRoute)(nil)).Elem()
}

func (o NetworkRouteOutput) ToNetworkRouteOutput() NetworkRouteOutput {
	return o
}

func (o NetworkRouteOutput) ToNetworkRouteOutputWithContext(ctx context.Context) NetworkRouteOutput {
	return o
}

// Network to route for
func (o NetworkRouteOutput) Target() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkRoute) string { return v.Target }).(pulumi.StringOutput)
}

// Gateway address
func (o NetworkRouteOutput) Via() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkRoute) *string { return v.Via }).(pulumi.StringPtrOutput)
}

type NetworkRouteArrayOutput struct{ *pulumi.OutputState }

func (NetworkRouteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkRoute)(nil)).Elem()
}

func (o NetworkRouteArrayOutput) ToNetworkRouteArrayOutput() NetworkRouteArrayOutput {
	return o
}

func (o NetworkRouteArrayOutput) ToNetworkRouteArrayOutputWithContext(ctx context.Context) NetworkRouteArrayOutput {
	return o
}

func (o NetworkRouteArrayOutput) Index(i pulumi.IntInput) NetworkRouteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworkRoute {
		return vs[0].([]NetworkRoute)[vs[1].(int)]
	}).(NetworkRouteOutput)
}

type GerNetworkAssignIpv4 struct {
	Zerotier *bool `pulumi:"zerotier"`
}

// GerNetworkAssignIpv4Input is an input type that accepts GerNetworkAssignIpv4Args and GerNetworkAssignIpv4Output values.
// You can construct a concrete instance of `GerNetworkAssignIpv4Input` via:
//
//          GerNetworkAssignIpv4Args{...}
type GerNetworkAssignIpv4Input interface {
	pulumi.Input

	ToGerNetworkAssignIpv4Output() GerNetworkAssignIpv4Output
	ToGerNetworkAssignIpv4OutputWithContext(context.Context) GerNetworkAssignIpv4Output
}

type GerNetworkAssignIpv4Args struct {
	Zerotier pulumi.BoolPtrInput `pulumi:"zerotier"`
}

func (GerNetworkAssignIpv4Args) ElementType() reflect.Type {
	return reflect.TypeOf((*GerNetworkAssignIpv4)(nil)).Elem()
}

func (i GerNetworkAssignIpv4Args) ToGerNetworkAssignIpv4Output() GerNetworkAssignIpv4Output {
	return i.ToGerNetworkAssignIpv4OutputWithContext(context.Background())
}

func (i GerNetworkAssignIpv4Args) ToGerNetworkAssignIpv4OutputWithContext(ctx context.Context) GerNetworkAssignIpv4Output {
	return pulumi.ToOutputWithContext(ctx, i).(GerNetworkAssignIpv4Output)
}

// GerNetworkAssignIpv4ArrayInput is an input type that accepts GerNetworkAssignIpv4Array and GerNetworkAssignIpv4ArrayOutput values.
// You can construct a concrete instance of `GerNetworkAssignIpv4ArrayInput` via:
//
//          GerNetworkAssignIpv4Array{ GerNetworkAssignIpv4Args{...} }
type GerNetworkAssignIpv4ArrayInput interface {
	pulumi.Input

	ToGerNetworkAssignIpv4ArrayOutput() GerNetworkAssignIpv4ArrayOutput
	ToGerNetworkAssignIpv4ArrayOutputWithContext(context.Context) GerNetworkAssignIpv4ArrayOutput
}

type GerNetworkAssignIpv4Array []GerNetworkAssignIpv4Input

func (GerNetworkAssignIpv4Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GerNetworkAssignIpv4)(nil)).Elem()
}

func (i GerNetworkAssignIpv4Array) ToGerNetworkAssignIpv4ArrayOutput() GerNetworkAssignIpv4ArrayOutput {
	return i.ToGerNetworkAssignIpv4ArrayOutputWithContext(context.Background())
}

func (i GerNetworkAssignIpv4Array) ToGerNetworkAssignIpv4ArrayOutputWithContext(ctx context.Context) GerNetworkAssignIpv4ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GerNetworkAssignIpv4ArrayOutput)
}

type GerNetworkAssignIpv4Output struct{ *pulumi.OutputState }

func (GerNetworkAssignIpv4Output) ElementType() reflect.Type {
	return reflect.TypeOf((*GerNetworkAssignIpv4)(nil)).Elem()
}

func (o GerNetworkAssignIpv4Output) ToGerNetworkAssignIpv4Output() GerNetworkAssignIpv4Output {
	return o
}

func (o GerNetworkAssignIpv4Output) ToGerNetworkAssignIpv4OutputWithContext(ctx context.Context) GerNetworkAssignIpv4Output {
	return o
}

func (o GerNetworkAssignIpv4Output) Zerotier() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GerNetworkAssignIpv4) *bool { return v.Zerotier }).(pulumi.BoolPtrOutput)
}

type GerNetworkAssignIpv4ArrayOutput struct{ *pulumi.OutputState }

func (GerNetworkAssignIpv4ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GerNetworkAssignIpv4)(nil)).Elem()
}

func (o GerNetworkAssignIpv4ArrayOutput) ToGerNetworkAssignIpv4ArrayOutput() GerNetworkAssignIpv4ArrayOutput {
	return o
}

func (o GerNetworkAssignIpv4ArrayOutput) ToGerNetworkAssignIpv4ArrayOutputWithContext(ctx context.Context) GerNetworkAssignIpv4ArrayOutput {
	return o
}

func (o GerNetworkAssignIpv4ArrayOutput) Index(i pulumi.IntInput) GerNetworkAssignIpv4Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GerNetworkAssignIpv4 {
		return vs[0].([]GerNetworkAssignIpv4)[vs[1].(int)]
	}).(GerNetworkAssignIpv4Output)
}

type GerNetworkAssignIpv6 struct {
	Rfc4193  *bool `pulumi:"rfc4193"`
	Sixplane *bool `pulumi:"sixplane"`
	Zerotier *bool `pulumi:"zerotier"`
}

// GerNetworkAssignIpv6Input is an input type that accepts GerNetworkAssignIpv6Args and GerNetworkAssignIpv6Output values.
// You can construct a concrete instance of `GerNetworkAssignIpv6Input` via:
//
//          GerNetworkAssignIpv6Args{...}
type GerNetworkAssignIpv6Input interface {
	pulumi.Input

	ToGerNetworkAssignIpv6Output() GerNetworkAssignIpv6Output
	ToGerNetworkAssignIpv6OutputWithContext(context.Context) GerNetworkAssignIpv6Output
}

type GerNetworkAssignIpv6Args struct {
	Rfc4193  pulumi.BoolPtrInput `pulumi:"rfc4193"`
	Sixplane pulumi.BoolPtrInput `pulumi:"sixplane"`
	Zerotier pulumi.BoolPtrInput `pulumi:"zerotier"`
}

func (GerNetworkAssignIpv6Args) ElementType() reflect.Type {
	return reflect.TypeOf((*GerNetworkAssignIpv6)(nil)).Elem()
}

func (i GerNetworkAssignIpv6Args) ToGerNetworkAssignIpv6Output() GerNetworkAssignIpv6Output {
	return i.ToGerNetworkAssignIpv6OutputWithContext(context.Background())
}

func (i GerNetworkAssignIpv6Args) ToGerNetworkAssignIpv6OutputWithContext(ctx context.Context) GerNetworkAssignIpv6Output {
	return pulumi.ToOutputWithContext(ctx, i).(GerNetworkAssignIpv6Output)
}

// GerNetworkAssignIpv6ArrayInput is an input type that accepts GerNetworkAssignIpv6Array and GerNetworkAssignIpv6ArrayOutput values.
// You can construct a concrete instance of `GerNetworkAssignIpv6ArrayInput` via:
//
//          GerNetworkAssignIpv6Array{ GerNetworkAssignIpv6Args{...} }
type GerNetworkAssignIpv6ArrayInput interface {
	pulumi.Input

	ToGerNetworkAssignIpv6ArrayOutput() GerNetworkAssignIpv6ArrayOutput
	ToGerNetworkAssignIpv6ArrayOutputWithContext(context.Context) GerNetworkAssignIpv6ArrayOutput
}

type GerNetworkAssignIpv6Array []GerNetworkAssignIpv6Input

func (GerNetworkAssignIpv6Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GerNetworkAssignIpv6)(nil)).Elem()
}

func (i GerNetworkAssignIpv6Array) ToGerNetworkAssignIpv6ArrayOutput() GerNetworkAssignIpv6ArrayOutput {
	return i.ToGerNetworkAssignIpv6ArrayOutputWithContext(context.Background())
}

func (i GerNetworkAssignIpv6Array) ToGerNetworkAssignIpv6ArrayOutputWithContext(ctx context.Context) GerNetworkAssignIpv6ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GerNetworkAssignIpv6ArrayOutput)
}

type GerNetworkAssignIpv6Output struct{ *pulumi.OutputState }

func (GerNetworkAssignIpv6Output) ElementType() reflect.Type {
	return reflect.TypeOf((*GerNetworkAssignIpv6)(nil)).Elem()
}

func (o GerNetworkAssignIpv6Output) ToGerNetworkAssignIpv6Output() GerNetworkAssignIpv6Output {
	return o
}

func (o GerNetworkAssignIpv6Output) ToGerNetworkAssignIpv6OutputWithContext(ctx context.Context) GerNetworkAssignIpv6Output {
	return o
}

func (o GerNetworkAssignIpv6Output) Rfc4193() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GerNetworkAssignIpv6) *bool { return v.Rfc4193 }).(pulumi.BoolPtrOutput)
}

func (o GerNetworkAssignIpv6Output) Sixplane() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GerNetworkAssignIpv6) *bool { return v.Sixplane }).(pulumi.BoolPtrOutput)
}

func (o GerNetworkAssignIpv6Output) Zerotier() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GerNetworkAssignIpv6) *bool { return v.Zerotier }).(pulumi.BoolPtrOutput)
}

type GerNetworkAssignIpv6ArrayOutput struct{ *pulumi.OutputState }

func (GerNetworkAssignIpv6ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GerNetworkAssignIpv6)(nil)).Elem()
}

func (o GerNetworkAssignIpv6ArrayOutput) ToGerNetworkAssignIpv6ArrayOutput() GerNetworkAssignIpv6ArrayOutput {
	return o
}

func (o GerNetworkAssignIpv6ArrayOutput) ToGerNetworkAssignIpv6ArrayOutputWithContext(ctx context.Context) GerNetworkAssignIpv6ArrayOutput {
	return o
}

func (o GerNetworkAssignIpv6ArrayOutput) Index(i pulumi.IntInput) GerNetworkAssignIpv6Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GerNetworkAssignIpv6 {
		return vs[0].([]GerNetworkAssignIpv6)[vs[1].(int)]
	}).(GerNetworkAssignIpv6Output)
}

type GerNetworkAssignmentPool struct {
	End   *string `pulumi:"end"`
	Start *string `pulumi:"start"`
}

// GerNetworkAssignmentPoolInput is an input type that accepts GerNetworkAssignmentPoolArgs and GerNetworkAssignmentPoolOutput values.
// You can construct a concrete instance of `GerNetworkAssignmentPoolInput` via:
//
//          GerNetworkAssignmentPoolArgs{...}
type GerNetworkAssignmentPoolInput interface {
	pulumi.Input

	ToGerNetworkAssignmentPoolOutput() GerNetworkAssignmentPoolOutput
	ToGerNetworkAssignmentPoolOutputWithContext(context.Context) GerNetworkAssignmentPoolOutput
}

type GerNetworkAssignmentPoolArgs struct {
	End   pulumi.StringPtrInput `pulumi:"end"`
	Start pulumi.StringPtrInput `pulumi:"start"`
}

func (GerNetworkAssignmentPoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GerNetworkAssignmentPool)(nil)).Elem()
}

func (i GerNetworkAssignmentPoolArgs) ToGerNetworkAssignmentPoolOutput() GerNetworkAssignmentPoolOutput {
	return i.ToGerNetworkAssignmentPoolOutputWithContext(context.Background())
}

func (i GerNetworkAssignmentPoolArgs) ToGerNetworkAssignmentPoolOutputWithContext(ctx context.Context) GerNetworkAssignmentPoolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GerNetworkAssignmentPoolOutput)
}

// GerNetworkAssignmentPoolArrayInput is an input type that accepts GerNetworkAssignmentPoolArray and GerNetworkAssignmentPoolArrayOutput values.
// You can construct a concrete instance of `GerNetworkAssignmentPoolArrayInput` via:
//
//          GerNetworkAssignmentPoolArray{ GerNetworkAssignmentPoolArgs{...} }
type GerNetworkAssignmentPoolArrayInput interface {
	pulumi.Input

	ToGerNetworkAssignmentPoolArrayOutput() GerNetworkAssignmentPoolArrayOutput
	ToGerNetworkAssignmentPoolArrayOutputWithContext(context.Context) GerNetworkAssignmentPoolArrayOutput
}

type GerNetworkAssignmentPoolArray []GerNetworkAssignmentPoolInput

func (GerNetworkAssignmentPoolArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GerNetworkAssignmentPool)(nil)).Elem()
}

func (i GerNetworkAssignmentPoolArray) ToGerNetworkAssignmentPoolArrayOutput() GerNetworkAssignmentPoolArrayOutput {
	return i.ToGerNetworkAssignmentPoolArrayOutputWithContext(context.Background())
}

func (i GerNetworkAssignmentPoolArray) ToGerNetworkAssignmentPoolArrayOutputWithContext(ctx context.Context) GerNetworkAssignmentPoolArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GerNetworkAssignmentPoolArrayOutput)
}

type GerNetworkAssignmentPoolOutput struct{ *pulumi.OutputState }

func (GerNetworkAssignmentPoolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GerNetworkAssignmentPool)(nil)).Elem()
}

func (o GerNetworkAssignmentPoolOutput) ToGerNetworkAssignmentPoolOutput() GerNetworkAssignmentPoolOutput {
	return o
}

func (o GerNetworkAssignmentPoolOutput) ToGerNetworkAssignmentPoolOutputWithContext(ctx context.Context) GerNetworkAssignmentPoolOutput {
	return o
}

func (o GerNetworkAssignmentPoolOutput) End() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GerNetworkAssignmentPool) *string { return v.End }).(pulumi.StringPtrOutput)
}

func (o GerNetworkAssignmentPoolOutput) Start() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GerNetworkAssignmentPool) *string { return v.Start }).(pulumi.StringPtrOutput)
}

type GerNetworkAssignmentPoolArrayOutput struct{ *pulumi.OutputState }

func (GerNetworkAssignmentPoolArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GerNetworkAssignmentPool)(nil)).Elem()
}

func (o GerNetworkAssignmentPoolArrayOutput) ToGerNetworkAssignmentPoolArrayOutput() GerNetworkAssignmentPoolArrayOutput {
	return o
}

func (o GerNetworkAssignmentPoolArrayOutput) ToGerNetworkAssignmentPoolArrayOutputWithContext(ctx context.Context) GerNetworkAssignmentPoolArrayOutput {
	return o
}

func (o GerNetworkAssignmentPoolArrayOutput) Index(i pulumi.IntInput) GerNetworkAssignmentPoolOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GerNetworkAssignmentPool {
		return vs[0].([]GerNetworkAssignmentPool)[vs[1].(int)]
	}).(GerNetworkAssignmentPoolOutput)
}

type GerNetworkRoute struct {
	Target string  `pulumi:"target"`
	Via    *string `pulumi:"via"`
}

// GerNetworkRouteInput is an input type that accepts GerNetworkRouteArgs and GerNetworkRouteOutput values.
// You can construct a concrete instance of `GerNetworkRouteInput` via:
//
//          GerNetworkRouteArgs{...}
type GerNetworkRouteInput interface {
	pulumi.Input

	ToGerNetworkRouteOutput() GerNetworkRouteOutput
	ToGerNetworkRouteOutputWithContext(context.Context) GerNetworkRouteOutput
}

type GerNetworkRouteArgs struct {
	Target pulumi.StringInput    `pulumi:"target"`
	Via    pulumi.StringPtrInput `pulumi:"via"`
}

func (GerNetworkRouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GerNetworkRoute)(nil)).Elem()
}

func (i GerNetworkRouteArgs) ToGerNetworkRouteOutput() GerNetworkRouteOutput {
	return i.ToGerNetworkRouteOutputWithContext(context.Background())
}

func (i GerNetworkRouteArgs) ToGerNetworkRouteOutputWithContext(ctx context.Context) GerNetworkRouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GerNetworkRouteOutput)
}

// GerNetworkRouteArrayInput is an input type that accepts GerNetworkRouteArray and GerNetworkRouteArrayOutput values.
// You can construct a concrete instance of `GerNetworkRouteArrayInput` via:
//
//          GerNetworkRouteArray{ GerNetworkRouteArgs{...} }
type GerNetworkRouteArrayInput interface {
	pulumi.Input

	ToGerNetworkRouteArrayOutput() GerNetworkRouteArrayOutput
	ToGerNetworkRouteArrayOutputWithContext(context.Context) GerNetworkRouteArrayOutput
}

type GerNetworkRouteArray []GerNetworkRouteInput

func (GerNetworkRouteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GerNetworkRoute)(nil)).Elem()
}

func (i GerNetworkRouteArray) ToGerNetworkRouteArrayOutput() GerNetworkRouteArrayOutput {
	return i.ToGerNetworkRouteArrayOutputWithContext(context.Background())
}

func (i GerNetworkRouteArray) ToGerNetworkRouteArrayOutputWithContext(ctx context.Context) GerNetworkRouteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GerNetworkRouteArrayOutput)
}

type GerNetworkRouteOutput struct{ *pulumi.OutputState }

func (GerNetworkRouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GerNetworkRoute)(nil)).Elem()
}

func (o GerNetworkRouteOutput) ToGerNetworkRouteOutput() GerNetworkRouteOutput {
	return o
}

func (o GerNetworkRouteOutput) ToGerNetworkRouteOutputWithContext(ctx context.Context) GerNetworkRouteOutput {
	return o
}

func (o GerNetworkRouteOutput) Target() pulumi.StringOutput {
	return o.ApplyT(func(v GerNetworkRoute) string { return v.Target }).(pulumi.StringOutput)
}

func (o GerNetworkRouteOutput) Via() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GerNetworkRoute) *string { return v.Via }).(pulumi.StringPtrOutput)
}

type GerNetworkRouteArrayOutput struct{ *pulumi.OutputState }

func (GerNetworkRouteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GerNetworkRoute)(nil)).Elem()
}

func (o GerNetworkRouteArrayOutput) ToGerNetworkRouteArrayOutput() GerNetworkRouteArrayOutput {
	return o
}

func (o GerNetworkRouteArrayOutput) ToGerNetworkRouteArrayOutputWithContext(ctx context.Context) GerNetworkRouteArrayOutput {
	return o
}

func (o GerNetworkRouteArrayOutput) Index(i pulumi.IntInput) GerNetworkRouteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GerNetworkRoute {
		return vs[0].([]GerNetworkRoute)[vs[1].(int)]
	}).(GerNetworkRouteOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkAssignIpv4Input)(nil)).Elem(), NetworkAssignIpv4Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkAssignIpv4ArrayInput)(nil)).Elem(), NetworkAssignIpv4Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkAssignIpv6Input)(nil)).Elem(), NetworkAssignIpv6Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkAssignIpv6ArrayInput)(nil)).Elem(), NetworkAssignIpv6Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkAssignmentPoolInput)(nil)).Elem(), NetworkAssignmentPoolArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkAssignmentPoolArrayInput)(nil)).Elem(), NetworkAssignmentPoolArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkRouteInput)(nil)).Elem(), NetworkRouteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkRouteArrayInput)(nil)).Elem(), NetworkRouteArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GerNetworkAssignIpv4Input)(nil)).Elem(), GerNetworkAssignIpv4Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*GerNetworkAssignIpv4ArrayInput)(nil)).Elem(), GerNetworkAssignIpv4Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*GerNetworkAssignIpv6Input)(nil)).Elem(), GerNetworkAssignIpv6Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*GerNetworkAssignIpv6ArrayInput)(nil)).Elem(), GerNetworkAssignIpv6Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*GerNetworkAssignmentPoolInput)(nil)).Elem(), GerNetworkAssignmentPoolArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GerNetworkAssignmentPoolArrayInput)(nil)).Elem(), GerNetworkAssignmentPoolArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GerNetworkRouteInput)(nil)).Elem(), GerNetworkRouteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GerNetworkRouteArrayInput)(nil)).Elem(), GerNetworkRouteArray{})
	pulumi.RegisterOutputType(NetworkAssignIpv4Output{})
	pulumi.RegisterOutputType(NetworkAssignIpv4ArrayOutput{})
	pulumi.RegisterOutputType(NetworkAssignIpv6Output{})
	pulumi.RegisterOutputType(NetworkAssignIpv6ArrayOutput{})
	pulumi.RegisterOutputType(NetworkAssignmentPoolOutput{})
	pulumi.RegisterOutputType(NetworkAssignmentPoolArrayOutput{})
	pulumi.RegisterOutputType(NetworkRouteOutput{})
	pulumi.RegisterOutputType(NetworkRouteArrayOutput{})
	pulumi.RegisterOutputType(GerNetworkAssignIpv4Output{})
	pulumi.RegisterOutputType(GerNetworkAssignIpv4ArrayOutput{})
	pulumi.RegisterOutputType(GerNetworkAssignIpv6Output{})
	pulumi.RegisterOutputType(GerNetworkAssignIpv6ArrayOutput{})
	pulumi.RegisterOutputType(GerNetworkAssignmentPoolOutput{})
	pulumi.RegisterOutputType(GerNetworkAssignmentPoolArrayOutput{})
	pulumi.RegisterOutputType(GerNetworkRouteOutput{})
	pulumi.RegisterOutputType(GerNetworkRouteArrayOutput{})
}
