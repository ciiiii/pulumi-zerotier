// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Zerotier
{
    /// <summary>
    /// Network provider for ZeroTier, allows you to create ZeroTier networks.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Zerotier = Pulumi.Zerotier;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var myNetwork = new Zerotier.Network("myNetwork", new Zerotier.NetworkArgs
    ///         {
    ///             AssignIpv4s = 
    ///             {
    ///                 new Zerotier.Inputs.NetworkAssignIpv4Args
    ///                 {
    ///                     Zerotier = true,
    ///                 },
    ///             },
    ///             AssignIpv6s = 
    ///             {
    ///                 new Zerotier.Inputs.NetworkAssignIpv6Args
    ///                 {
    ///                     Rfc4193 = false,
    ///                     Sixplane = false,
    ///                     Zerotier = true,
    ///                 },
    ///             },
    ///             Description = "Managed by Terraform",
    ///             EnableBroadcast = true,
    ///             FlowRules = "accept;",
    ///             Private = false,
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// Networks can be imported using their ID, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import zerotier:index/network:Network network 8056c2e21c1930be
    /// ```
    /// </summary>
    [ZerotierResourceType("zerotier:index/network:Network")]
    public partial class Network : Pulumi.CustomResource
    {
        /// <summary>
        /// IPv4 Assignment RuleSets
        /// </summary>
        [Output("assignIpv4s")]
        public Output<ImmutableArray<Outputs.NetworkAssignIpv4>> AssignIpv4s { get; private set; } = null!;

        /// <summary>
        /// IPv6 Assignment RuleSets
        /// </summary>
        [Output("assignIpv6s")]
        public Output<ImmutableArray<Outputs.NetworkAssignIpv6>> AssignIpv6s { get; private set; } = null!;

        /// <summary>
        /// Rules regarding IPv4 and IPv6 assignments
        /// </summary>
        [Output("assignmentPools")]
        public Output<ImmutableArray<Outputs.NetworkAssignmentPool>> AssignmentPools { get; private set; } = null!;

        /// <summary>
        /// The time at which this network was created, in epoch seconds
        /// </summary>
        [Output("creationTime")]
        public Output<int> CreationTime { get; private set; } = null!;

        /// <summary>
        /// The description of the network
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Enable broadcast packets on the network
        /// </summary>
        [Output("enableBroadcast")]
        public Output<bool?> EnableBroadcast { get; private set; } = null!;

        /// <summary>
        /// The layer 2 flow rules to apply to packets traveling across this network. Please see https://www.zerotier.com/manual/#3*4*1 for more information.
        /// </summary>
        [Output("flowRules")]
        public Output<string?> FlowRules { get; private set; } = null!;

        /// <summary>
        /// ZeroTier's internal network identifier, aka NetworkID
        /// </summary>
        [Output("id")]
        public Output<string> NetworkId { get; private set; } = null!;

        /// <summary>
        /// Maximum number of recipients per multicast or broadcast. Warning - Setting this to 0 will disable IPv4 communication on your network!
        /// </summary>
        [Output("multicastLimit")]
        public Output<int?> MulticastLimit { get; private set; } = null!;

        /// <summary>
        /// The name of the network
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Whether or not the network is private.  If false, members will *NOT* need to be authorized to join.
        /// </summary>
        [Output("private")]
        public Output<bool?> Private { get; private set; } = null!;

        /// <summary>
        /// A ipv4 or ipv6 network route
        /// </summary>
        [Output("routes")]
        public Output<ImmutableArray<Outputs.NetworkRoute>> Routes { get; private set; } = null!;


        /// <summary>
        /// Create a Network resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Network(string name, NetworkArgs? args = null, CustomResourceOptions? options = null)
            : base("zerotier:index/network:Network", name, args ?? new NetworkArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Network(string name, Input<string> id, NetworkState? state = null, CustomResourceOptions? options = null)
            : base("zerotier:index/network:Network", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Network resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Network Get(string name, Input<string> id, NetworkState? state = null, CustomResourceOptions? options = null)
        {
            return new Network(name, id, state, options);
        }
    }

    public sealed class NetworkArgs : Pulumi.ResourceArgs
    {
        [Input("assignIpv4s")]
        private InputList<Inputs.NetworkAssignIpv4Args>? _assignIpv4s;

        /// <summary>
        /// IPv4 Assignment RuleSets
        /// </summary>
        public InputList<Inputs.NetworkAssignIpv4Args> AssignIpv4s
        {
            get => _assignIpv4s ?? (_assignIpv4s = new InputList<Inputs.NetworkAssignIpv4Args>());
            set => _assignIpv4s = value;
        }

        [Input("assignIpv6s")]
        private InputList<Inputs.NetworkAssignIpv6Args>? _assignIpv6s;

        /// <summary>
        /// IPv6 Assignment RuleSets
        /// </summary>
        public InputList<Inputs.NetworkAssignIpv6Args> AssignIpv6s
        {
            get => _assignIpv6s ?? (_assignIpv6s = new InputList<Inputs.NetworkAssignIpv6Args>());
            set => _assignIpv6s = value;
        }

        [Input("assignmentPools")]
        private InputList<Inputs.NetworkAssignmentPoolArgs>? _assignmentPools;

        /// <summary>
        /// Rules regarding IPv4 and IPv6 assignments
        /// </summary>
        public InputList<Inputs.NetworkAssignmentPoolArgs> AssignmentPools
        {
            get => _assignmentPools ?? (_assignmentPools = new InputList<Inputs.NetworkAssignmentPoolArgs>());
            set => _assignmentPools = value;
        }

        /// <summary>
        /// The description of the network
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Enable broadcast packets on the network
        /// </summary>
        [Input("enableBroadcast")]
        public Input<bool>? EnableBroadcast { get; set; }

        /// <summary>
        /// The layer 2 flow rules to apply to packets traveling across this network. Please see https://www.zerotier.com/manual/#3*4*1 for more information.
        /// </summary>
        [Input("flowRules")]
        public Input<string>? FlowRules { get; set; }

        /// <summary>
        /// ZeroTier's internal network identifier, aka NetworkID
        /// </summary>
        [Input("id")]
        public Input<string>? NetworkId { get; set; }

        /// <summary>
        /// Maximum number of recipients per multicast or broadcast. Warning - Setting this to 0 will disable IPv4 communication on your network!
        /// </summary>
        [Input("multicastLimit")]
        public Input<int>? MulticastLimit { get; set; }

        /// <summary>
        /// The name of the network
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Whether or not the network is private.  If false, members will *NOT* need to be authorized to join.
        /// </summary>
        [Input("private")]
        public Input<bool>? Private { get; set; }

        [Input("routes")]
        private InputList<Inputs.NetworkRouteArgs>? _routes;

        /// <summary>
        /// A ipv4 or ipv6 network route
        /// </summary>
        public InputList<Inputs.NetworkRouteArgs> Routes
        {
            get => _routes ?? (_routes = new InputList<Inputs.NetworkRouteArgs>());
            set => _routes = value;
        }

        public NetworkArgs()
        {
        }
    }

    public sealed class NetworkState : Pulumi.ResourceArgs
    {
        [Input("assignIpv4s")]
        private InputList<Inputs.NetworkAssignIpv4GetArgs>? _assignIpv4s;

        /// <summary>
        /// IPv4 Assignment RuleSets
        /// </summary>
        public InputList<Inputs.NetworkAssignIpv4GetArgs> AssignIpv4s
        {
            get => _assignIpv4s ?? (_assignIpv4s = new InputList<Inputs.NetworkAssignIpv4GetArgs>());
            set => _assignIpv4s = value;
        }

        [Input("assignIpv6s")]
        private InputList<Inputs.NetworkAssignIpv6GetArgs>? _assignIpv6s;

        /// <summary>
        /// IPv6 Assignment RuleSets
        /// </summary>
        public InputList<Inputs.NetworkAssignIpv6GetArgs> AssignIpv6s
        {
            get => _assignIpv6s ?? (_assignIpv6s = new InputList<Inputs.NetworkAssignIpv6GetArgs>());
            set => _assignIpv6s = value;
        }

        [Input("assignmentPools")]
        private InputList<Inputs.NetworkAssignmentPoolGetArgs>? _assignmentPools;

        /// <summary>
        /// Rules regarding IPv4 and IPv6 assignments
        /// </summary>
        public InputList<Inputs.NetworkAssignmentPoolGetArgs> AssignmentPools
        {
            get => _assignmentPools ?? (_assignmentPools = new InputList<Inputs.NetworkAssignmentPoolGetArgs>());
            set => _assignmentPools = value;
        }

        /// <summary>
        /// The time at which this network was created, in epoch seconds
        /// </summary>
        [Input("creationTime")]
        public Input<int>? CreationTime { get; set; }

        /// <summary>
        /// The description of the network
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Enable broadcast packets on the network
        /// </summary>
        [Input("enableBroadcast")]
        public Input<bool>? EnableBroadcast { get; set; }

        /// <summary>
        /// The layer 2 flow rules to apply to packets traveling across this network. Please see https://www.zerotier.com/manual/#3*4*1 for more information.
        /// </summary>
        [Input("flowRules")]
        public Input<string>? FlowRules { get; set; }

        /// <summary>
        /// ZeroTier's internal network identifier, aka NetworkID
        /// </summary>
        [Input("id")]
        public Input<string>? NetworkId { get; set; }

        /// <summary>
        /// Maximum number of recipients per multicast or broadcast. Warning - Setting this to 0 will disable IPv4 communication on your network!
        /// </summary>
        [Input("multicastLimit")]
        public Input<int>? MulticastLimit { get; set; }

        /// <summary>
        /// The name of the network
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Whether or not the network is private.  If false, members will *NOT* need to be authorized to join.
        /// </summary>
        [Input("private")]
        public Input<bool>? Private { get; set; }

        [Input("routes")]
        private InputList<Inputs.NetworkRouteGetArgs>? _routes;

        /// <summary>
        /// A ipv4 or ipv6 network route
        /// </summary>
        public InputList<Inputs.NetworkRouteGetArgs> Routes
        {
            get => _routes ?? (_routes = new InputList<Inputs.NetworkRouteGetArgs>());
            set => _routes = value;
        }

        public NetworkState()
        {
        }
    }
}
