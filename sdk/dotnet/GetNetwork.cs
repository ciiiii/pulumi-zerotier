// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Zerotier
{
    public static class GetNetwork
    {
        /// <summary>
        /// Data source for ZeroTier networks, allowing you to find a network by ID
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Zerotier = Pulumi.Zerotier;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var bob = Output.Create(Zerotier.GetNetwork.InvokeAsync(new Zerotier.GetNetworkArgs
        ///         {
        ///             Id = zerotier_network.Bobs_garage.Id,
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetNetworkResult> InvokeAsync(GetNetworkArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetNetworkResult>("zerotier:index/getNetwork:getNetwork", args ?? new GetNetworkArgs(), options.WithDefaults());

        /// <summary>
        /// Data source for ZeroTier networks, allowing you to find a network by ID
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Zerotier = Pulumi.Zerotier;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var bob = Output.Create(Zerotier.GetNetwork.InvokeAsync(new Zerotier.GetNetworkArgs
        ///         {
        ///             Id = zerotier_network.Bobs_garage.Id,
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetNetworkResult> Invoke(GetNetworkInvokeArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetNetworkResult>("zerotier:index/getNetwork:getNetwork", args ?? new GetNetworkInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetNetworkArgs : Pulumi.InvokeArgs
    {
        [Input("assignIpv4s")]
        private List<Inputs.GetNetworkAssignIpv4Args>? _assignIpv4s;

        /// <summary>
        /// IPv4 Assignment RuleSets
        /// </summary>
        public List<Inputs.GetNetworkAssignIpv4Args> AssignIpv4s
        {
            get => _assignIpv4s ?? (_assignIpv4s = new List<Inputs.GetNetworkAssignIpv4Args>());
            set => _assignIpv4s = value;
        }

        [Input("assignIpv6s")]
        private List<Inputs.GetNetworkAssignIpv6Args>? _assignIpv6s;

        /// <summary>
        /// IPv6 Assignment RuleSets
        /// </summary>
        public List<Inputs.GetNetworkAssignIpv6Args> AssignIpv6s
        {
            get => _assignIpv6s ?? (_assignIpv6s = new List<Inputs.GetNetworkAssignIpv6Args>());
            set => _assignIpv6s = value;
        }

        [Input("assignmentPools")]
        private List<Inputs.GetNetworkAssignmentPoolArgs>? _assignmentPools;

        /// <summary>
        /// Rules regarding IPv4 and IPv6 assignments
        /// </summary>
        public List<Inputs.GetNetworkAssignmentPoolArgs> AssignmentPools
        {
            get => _assignmentPools ?? (_assignmentPools = new List<Inputs.GetNetworkAssignmentPoolArgs>());
            set => _assignmentPools = value;
        }

        /// <summary>
        /// The description of the network
        /// </summary>
        [Input("description")]
        public string? Description { get; set; }

        /// <summary>
        /// Enable broadcast packets on the network
        /// </summary>
        [Input("enableBroadcast")]
        public bool? EnableBroadcast { get; set; }

        /// <summary>
        /// The layer 2 flow rules to apply to packets traveling across this network. Please see https://www.zerotier.com/manual/#3*4*1 for more information.
        /// </summary>
        [Input("flowRules")]
        public string? FlowRules { get; set; }

        /// <summary>
        /// ZeroTier's internal network identifier, aka NetworkID
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        /// <summary>
        /// Maximum number of recipients per multicast or broadcast. Warning - Setting this to 0 will disable IPv4 communication on your network!
        /// </summary>
        [Input("multicastLimit")]
        public int? MulticastLimit { get; set; }

        /// <summary>
        /// The name of the network
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// Whether or not the network is private.  If false, members will *NOT* need to be authorized to join.
        /// </summary>
        [Input("private")]
        public bool? Private { get; set; }

        [Input("routes")]
        private List<Inputs.GetNetworkRouteArgs>? _routes;

        /// <summary>
        /// A ipv4 or ipv6 network route
        /// </summary>
        public List<Inputs.GetNetworkRouteArgs> Routes
        {
            get => _routes ?? (_routes = new List<Inputs.GetNetworkRouteArgs>());
            set => _routes = value;
        }

        public GetNetworkArgs()
        {
        }
    }

    public sealed class GetNetworkInvokeArgs : Pulumi.InvokeArgs
    {
        [Input("assignIpv4s")]
        private InputList<Inputs.GetNetworkAssignIpv4InputArgs>? _assignIpv4s;

        /// <summary>
        /// IPv4 Assignment RuleSets
        /// </summary>
        public InputList<Inputs.GetNetworkAssignIpv4InputArgs> AssignIpv4s
        {
            get => _assignIpv4s ?? (_assignIpv4s = new InputList<Inputs.GetNetworkAssignIpv4InputArgs>());
            set => _assignIpv4s = value;
        }

        [Input("assignIpv6s")]
        private InputList<Inputs.GetNetworkAssignIpv6InputArgs>? _assignIpv6s;

        /// <summary>
        /// IPv6 Assignment RuleSets
        /// </summary>
        public InputList<Inputs.GetNetworkAssignIpv6InputArgs> AssignIpv6s
        {
            get => _assignIpv6s ?? (_assignIpv6s = new InputList<Inputs.GetNetworkAssignIpv6InputArgs>());
            set => _assignIpv6s = value;
        }

        [Input("assignmentPools")]
        private InputList<Inputs.GetNetworkAssignmentPoolInputArgs>? _assignmentPools;

        /// <summary>
        /// Rules regarding IPv4 and IPv6 assignments
        /// </summary>
        public InputList<Inputs.GetNetworkAssignmentPoolInputArgs> AssignmentPools
        {
            get => _assignmentPools ?? (_assignmentPools = new InputList<Inputs.GetNetworkAssignmentPoolInputArgs>());
            set => _assignmentPools = value;
        }

        /// <summary>
        /// The description of the network
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Enable broadcast packets on the network
        /// </summary>
        [Input("enableBroadcast")]
        public Input<bool>? EnableBroadcast { get; set; }

        /// <summary>
        /// The layer 2 flow rules to apply to packets traveling across this network. Please see https://www.zerotier.com/manual/#3*4*1 for more information.
        /// </summary>
        [Input("flowRules")]
        public Input<string>? FlowRules { get; set; }

        /// <summary>
        /// ZeroTier's internal network identifier, aka NetworkID
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// Maximum number of recipients per multicast or broadcast. Warning - Setting this to 0 will disable IPv4 communication on your network!
        /// </summary>
        [Input("multicastLimit")]
        public Input<int>? MulticastLimit { get; set; }

        /// <summary>
        /// The name of the network
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Whether or not the network is private.  If false, members will *NOT* need to be authorized to join.
        /// </summary>
        [Input("private")]
        public Input<bool>? Private { get; set; }

        [Input("routes")]
        private InputList<Inputs.GetNetworkRouteInputArgs>? _routes;

        /// <summary>
        /// A ipv4 or ipv6 network route
        /// </summary>
        public InputList<Inputs.GetNetworkRouteInputArgs> Routes
        {
            get => _routes ?? (_routes = new InputList<Inputs.GetNetworkRouteInputArgs>());
            set => _routes = value;
        }

        public GetNetworkInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetNetworkResult
    {
        /// <summary>
        /// IPv4 Assignment RuleSets
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNetworkAssignIpv4Result> AssignIpv4s;
        /// <summary>
        /// IPv6 Assignment RuleSets
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNetworkAssignIpv6Result> AssignIpv6s;
        /// <summary>
        /// Rules regarding IPv4 and IPv6 assignments
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNetworkAssignmentPoolResult> AssignmentPools;
        /// <summary>
        /// The time at which this network was created, in epoch seconds
        /// </summary>
        public readonly int CreationTime;
        /// <summary>
        /// The description of the network
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// Enable broadcast packets on the network
        /// </summary>
        public readonly bool? EnableBroadcast;
        /// <summary>
        /// The layer 2 flow rules to apply to packets traveling across this network. Please see https://www.zerotier.com/manual/#3*4*1 for more information.
        /// </summary>
        public readonly string? FlowRules;
        /// <summary>
        /// ZeroTier's internal network identifier, aka NetworkID
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Maximum number of recipients per multicast or broadcast. Warning - Setting this to 0 will disable IPv4 communication on your network!
        /// </summary>
        public readonly int? MulticastLimit;
        /// <summary>
        /// The name of the network
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Whether or not the network is private.  If false, members will *NOT* need to be authorized to join.
        /// </summary>
        public readonly bool? Private;
        /// <summary>
        /// A ipv4 or ipv6 network route
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNetworkRouteResult> Routes;

        [OutputConstructor]
        private GetNetworkResult(
            ImmutableArray<Outputs.GetNetworkAssignIpv4Result> assignIpv4s,

            ImmutableArray<Outputs.GetNetworkAssignIpv6Result> assignIpv6s,

            ImmutableArray<Outputs.GetNetworkAssignmentPoolResult> assignmentPools,

            int creationTime,

            string? description,

            bool? enableBroadcast,

            string? flowRules,

            string id,

            int? multicastLimit,

            string name,

            bool? @private,

            ImmutableArray<Outputs.GetNetworkRouteResult> routes)
        {
            AssignIpv4s = assignIpv4s;
            AssignIpv6s = assignIpv6s;
            AssignmentPools = assignmentPools;
            CreationTime = creationTime;
            Description = description;
            EnableBroadcast = enableBroadcast;
            FlowRules = flowRules;
            Id = id;
            MulticastLimit = multicastLimit;
            Name = name;
            Private = @private;
            Routes = routes;
        }
    }
}
