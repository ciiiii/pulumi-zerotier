# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['NetworkArgs', 'Network']

@pulumi.input_type
class NetworkArgs:
    def __init__(__self__, *,
                 assign_ipv4s: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkAssignIpv4Args']]]] = None,
                 assign_ipv6s: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkAssignIpv6Args']]]] = None,
                 assignment_pools: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkAssignmentPoolArgs']]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enable_broadcast: Optional[pulumi.Input[bool]] = None,
                 flow_rules: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 multicast_limit: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 private: Optional[pulumi.Input[bool]] = None,
                 routes: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkRouteArgs']]]] = None):
        """
        The set of arguments for constructing a Network resource.
        :param pulumi.Input[Sequence[pulumi.Input['NetworkAssignIpv4Args']]] assign_ipv4s: IPv4 Assignment RuleSets
        :param pulumi.Input[Sequence[pulumi.Input['NetworkAssignIpv6Args']]] assign_ipv6s: IPv6 Assignment RuleSets
        :param pulumi.Input[Sequence[pulumi.Input['NetworkAssignmentPoolArgs']]] assignment_pools: Rules regarding IPv4 and IPv6 assignments
        :param pulumi.Input[str] description: The description of the network
        :param pulumi.Input[bool] enable_broadcast: Enable broadcast packets on the network
        :param pulumi.Input[str] flow_rules: The layer 2 flow rules to apply to packets traveling across this network. Please see https://www.zerotier.com/manual/#3*4*1 for more information.
        :param pulumi.Input[str] id: ZeroTier's internal network identifier, aka NetworkID
        :param pulumi.Input[int] multicast_limit: Maximum number of recipients per multicast or broadcast. Warning - Setting this to 0 will disable IPv4 communication on your network!
        :param pulumi.Input[str] name: The name of the network
        :param pulumi.Input[bool] private: Whether or not the network is private.  If false, members will *NOT* need to be authorized to join.
        :param pulumi.Input[Sequence[pulumi.Input['NetworkRouteArgs']]] routes: A ipv4 or ipv6 network route
        """
        if assign_ipv4s is not None:
            pulumi.set(__self__, "assign_ipv4s", assign_ipv4s)
        if assign_ipv6s is not None:
            pulumi.set(__self__, "assign_ipv6s", assign_ipv6s)
        if assignment_pools is not None:
            pulumi.set(__self__, "assignment_pools", assignment_pools)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enable_broadcast is not None:
            pulumi.set(__self__, "enable_broadcast", enable_broadcast)
        if flow_rules is not None:
            pulumi.set(__self__, "flow_rules", flow_rules)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if multicast_limit is not None:
            pulumi.set(__self__, "multicast_limit", multicast_limit)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if private is not None:
            pulumi.set(__self__, "private", private)
        if routes is not None:
            pulumi.set(__self__, "routes", routes)

    @property
    @pulumi.getter(name="assignIpv4s")
    def assign_ipv4s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworkAssignIpv4Args']]]]:
        """
        IPv4 Assignment RuleSets
        """
        return pulumi.get(self, "assign_ipv4s")

    @assign_ipv4s.setter
    def assign_ipv4s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkAssignIpv4Args']]]]):
        pulumi.set(self, "assign_ipv4s", value)

    @property
    @pulumi.getter(name="assignIpv6s")
    def assign_ipv6s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworkAssignIpv6Args']]]]:
        """
        IPv6 Assignment RuleSets
        """
        return pulumi.get(self, "assign_ipv6s")

    @assign_ipv6s.setter
    def assign_ipv6s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkAssignIpv6Args']]]]):
        pulumi.set(self, "assign_ipv6s", value)

    @property
    @pulumi.getter(name="assignmentPools")
    def assignment_pools(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworkAssignmentPoolArgs']]]]:
        """
        Rules regarding IPv4 and IPv6 assignments
        """
        return pulumi.get(self, "assignment_pools")

    @assignment_pools.setter
    def assignment_pools(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkAssignmentPoolArgs']]]]):
        pulumi.set(self, "assignment_pools", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the network
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="enableBroadcast")
    def enable_broadcast(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable broadcast packets on the network
        """
        return pulumi.get(self, "enable_broadcast")

    @enable_broadcast.setter
    def enable_broadcast(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_broadcast", value)

    @property
    @pulumi.getter(name="flowRules")
    def flow_rules(self) -> Optional[pulumi.Input[str]]:
        """
        The layer 2 flow rules to apply to packets traveling across this network. Please see https://www.zerotier.com/manual/#3*4*1 for more information.
        """
        return pulumi.get(self, "flow_rules")

    @flow_rules.setter
    def flow_rules(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "flow_rules", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        ZeroTier's internal network identifier, aka NetworkID
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="multicastLimit")
    def multicast_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of recipients per multicast or broadcast. Warning - Setting this to 0 will disable IPv4 communication on your network!
        """
        return pulumi.get(self, "multicast_limit")

    @multicast_limit.setter
    def multicast_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "multicast_limit", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the network
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def private(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether or not the network is private.  If false, members will *NOT* need to be authorized to join.
        """
        return pulumi.get(self, "private")

    @private.setter
    def private(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "private", value)

    @property
    @pulumi.getter
    def routes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworkRouteArgs']]]]:
        """
        A ipv4 or ipv6 network route
        """
        return pulumi.get(self, "routes")

    @routes.setter
    def routes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkRouteArgs']]]]):
        pulumi.set(self, "routes", value)


@pulumi.input_type
class _NetworkState:
    def __init__(__self__, *,
                 assign_ipv4s: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkAssignIpv4Args']]]] = None,
                 assign_ipv6s: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkAssignIpv6Args']]]] = None,
                 assignment_pools: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkAssignmentPoolArgs']]]] = None,
                 creation_time: Optional[pulumi.Input[int]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enable_broadcast: Optional[pulumi.Input[bool]] = None,
                 flow_rules: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 multicast_limit: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 private: Optional[pulumi.Input[bool]] = None,
                 routes: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkRouteArgs']]]] = None):
        """
        Input properties used for looking up and filtering Network resources.
        :param pulumi.Input[Sequence[pulumi.Input['NetworkAssignIpv4Args']]] assign_ipv4s: IPv4 Assignment RuleSets
        :param pulumi.Input[Sequence[pulumi.Input['NetworkAssignIpv6Args']]] assign_ipv6s: IPv6 Assignment RuleSets
        :param pulumi.Input[Sequence[pulumi.Input['NetworkAssignmentPoolArgs']]] assignment_pools: Rules regarding IPv4 and IPv6 assignments
        :param pulumi.Input[int] creation_time: The time at which this network was created, in epoch seconds
        :param pulumi.Input[str] description: The description of the network
        :param pulumi.Input[bool] enable_broadcast: Enable broadcast packets on the network
        :param pulumi.Input[str] flow_rules: The layer 2 flow rules to apply to packets traveling across this network. Please see https://www.zerotier.com/manual/#3*4*1 for more information.
        :param pulumi.Input[str] id: ZeroTier's internal network identifier, aka NetworkID
        :param pulumi.Input[int] multicast_limit: Maximum number of recipients per multicast or broadcast. Warning - Setting this to 0 will disable IPv4 communication on your network!
        :param pulumi.Input[str] name: The name of the network
        :param pulumi.Input[bool] private: Whether or not the network is private.  If false, members will *NOT* need to be authorized to join.
        :param pulumi.Input[Sequence[pulumi.Input['NetworkRouteArgs']]] routes: A ipv4 or ipv6 network route
        """
        if assign_ipv4s is not None:
            pulumi.set(__self__, "assign_ipv4s", assign_ipv4s)
        if assign_ipv6s is not None:
            pulumi.set(__self__, "assign_ipv6s", assign_ipv6s)
        if assignment_pools is not None:
            pulumi.set(__self__, "assignment_pools", assignment_pools)
        if creation_time is not None:
            pulumi.set(__self__, "creation_time", creation_time)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enable_broadcast is not None:
            pulumi.set(__self__, "enable_broadcast", enable_broadcast)
        if flow_rules is not None:
            pulumi.set(__self__, "flow_rules", flow_rules)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if multicast_limit is not None:
            pulumi.set(__self__, "multicast_limit", multicast_limit)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if private is not None:
            pulumi.set(__self__, "private", private)
        if routes is not None:
            pulumi.set(__self__, "routes", routes)

    @property
    @pulumi.getter(name="assignIpv4s")
    def assign_ipv4s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworkAssignIpv4Args']]]]:
        """
        IPv4 Assignment RuleSets
        """
        return pulumi.get(self, "assign_ipv4s")

    @assign_ipv4s.setter
    def assign_ipv4s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkAssignIpv4Args']]]]):
        pulumi.set(self, "assign_ipv4s", value)

    @property
    @pulumi.getter(name="assignIpv6s")
    def assign_ipv6s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworkAssignIpv6Args']]]]:
        """
        IPv6 Assignment RuleSets
        """
        return pulumi.get(self, "assign_ipv6s")

    @assign_ipv6s.setter
    def assign_ipv6s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkAssignIpv6Args']]]]):
        pulumi.set(self, "assign_ipv6s", value)

    @property
    @pulumi.getter(name="assignmentPools")
    def assignment_pools(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworkAssignmentPoolArgs']]]]:
        """
        Rules regarding IPv4 and IPv6 assignments
        """
        return pulumi.get(self, "assignment_pools")

    @assignment_pools.setter
    def assignment_pools(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkAssignmentPoolArgs']]]]):
        pulumi.set(self, "assignment_pools", value)

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> Optional[pulumi.Input[int]]:
        """
        The time at which this network was created, in epoch seconds
        """
        return pulumi.get(self, "creation_time")

    @creation_time.setter
    def creation_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "creation_time", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the network
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="enableBroadcast")
    def enable_broadcast(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable broadcast packets on the network
        """
        return pulumi.get(self, "enable_broadcast")

    @enable_broadcast.setter
    def enable_broadcast(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_broadcast", value)

    @property
    @pulumi.getter(name="flowRules")
    def flow_rules(self) -> Optional[pulumi.Input[str]]:
        """
        The layer 2 flow rules to apply to packets traveling across this network. Please see https://www.zerotier.com/manual/#3*4*1 for more information.
        """
        return pulumi.get(self, "flow_rules")

    @flow_rules.setter
    def flow_rules(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "flow_rules", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        ZeroTier's internal network identifier, aka NetworkID
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="multicastLimit")
    def multicast_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of recipients per multicast or broadcast. Warning - Setting this to 0 will disable IPv4 communication on your network!
        """
        return pulumi.get(self, "multicast_limit")

    @multicast_limit.setter
    def multicast_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "multicast_limit", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the network
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def private(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether or not the network is private.  If false, members will *NOT* need to be authorized to join.
        """
        return pulumi.get(self, "private")

    @private.setter
    def private(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "private", value)

    @property
    @pulumi.getter
    def routes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworkRouteArgs']]]]:
        """
        A ipv4 or ipv6 network route
        """
        return pulumi.get(self, "routes")

    @routes.setter
    def routes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkRouteArgs']]]]):
        pulumi.set(self, "routes", value)


class Network(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 assign_ipv4s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NetworkAssignIpv4Args']]]]] = None,
                 assign_ipv6s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NetworkAssignIpv6Args']]]]] = None,
                 assignment_pools: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NetworkAssignmentPoolArgs']]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enable_broadcast: Optional[pulumi.Input[bool]] = None,
                 flow_rules: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 multicast_limit: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 private: Optional[pulumi.Input[bool]] = None,
                 routes: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NetworkRouteArgs']]]]] = None,
                 __props__=None):
        """
        Network provider for ZeroTier, allows you to create ZeroTier networks.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_zerotier as zerotier

        my_network = zerotier.Network("myNetwork",
            assign_ipv4s=[zerotier.NetworkAssignIpv4Args(
                zerotier=True,
            )],
            assign_ipv6s=[zerotier.NetworkAssignIpv6Args(
                rfc4193=False,
                sixplane=False,
                zerotier=True,
            )],
            description="Managed by Terraform",
            enable_broadcast=True,
            flow_rules="accept;",
            private=False)
        ```

        ## Import

        Networks can be imported using their ID, e.g.

        ```sh
         $ pulumi import zerotier:index/network:Network network 8056c2e21c1930be
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NetworkAssignIpv4Args']]]] assign_ipv4s: IPv4 Assignment RuleSets
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NetworkAssignIpv6Args']]]] assign_ipv6s: IPv6 Assignment RuleSets
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NetworkAssignmentPoolArgs']]]] assignment_pools: Rules regarding IPv4 and IPv6 assignments
        :param pulumi.Input[str] description: The description of the network
        :param pulumi.Input[bool] enable_broadcast: Enable broadcast packets on the network
        :param pulumi.Input[str] flow_rules: The layer 2 flow rules to apply to packets traveling across this network. Please see https://www.zerotier.com/manual/#3*4*1 for more information.
        :param pulumi.Input[str] id: ZeroTier's internal network identifier, aka NetworkID
        :param pulumi.Input[int] multicast_limit: Maximum number of recipients per multicast or broadcast. Warning - Setting this to 0 will disable IPv4 communication on your network!
        :param pulumi.Input[str] name: The name of the network
        :param pulumi.Input[bool] private: Whether or not the network is private.  If false, members will *NOT* need to be authorized to join.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NetworkRouteArgs']]]] routes: A ipv4 or ipv6 network route
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[NetworkArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Network provider for ZeroTier, allows you to create ZeroTier networks.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_zerotier as zerotier

        my_network = zerotier.Network("myNetwork",
            assign_ipv4s=[zerotier.NetworkAssignIpv4Args(
                zerotier=True,
            )],
            assign_ipv6s=[zerotier.NetworkAssignIpv6Args(
                rfc4193=False,
                sixplane=False,
                zerotier=True,
            )],
            description="Managed by Terraform",
            enable_broadcast=True,
            flow_rules="accept;",
            private=False)
        ```

        ## Import

        Networks can be imported using their ID, e.g.

        ```sh
         $ pulumi import zerotier:index/network:Network network 8056c2e21c1930be
        ```

        :param str resource_name: The name of the resource.
        :param NetworkArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(NetworkArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 assign_ipv4s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NetworkAssignIpv4Args']]]]] = None,
                 assign_ipv6s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NetworkAssignIpv6Args']]]]] = None,
                 assignment_pools: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NetworkAssignmentPoolArgs']]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enable_broadcast: Optional[pulumi.Input[bool]] = None,
                 flow_rules: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 multicast_limit: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 private: Optional[pulumi.Input[bool]] = None,
                 routes: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NetworkRouteArgs']]]]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = NetworkArgs.__new__(NetworkArgs)

            __props__.__dict__["assign_ipv4s"] = assign_ipv4s
            __props__.__dict__["assign_ipv6s"] = assign_ipv6s
            __props__.__dict__["assignment_pools"] = assignment_pools
            __props__.__dict__["description"] = description
            __props__.__dict__["enable_broadcast"] = enable_broadcast
            __props__.__dict__["flow_rules"] = flow_rules
            __props__.__dict__["id"] = id
            __props__.__dict__["multicast_limit"] = multicast_limit
            __props__.__dict__["name"] = name
            __props__.__dict__["private"] = private
            __props__.__dict__["routes"] = routes
            __props__.__dict__["creation_time"] = None
        super(Network, __self__).__init__(
            'zerotier:index/network:Network',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            assign_ipv4s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NetworkAssignIpv4Args']]]]] = None,
            assign_ipv6s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NetworkAssignIpv6Args']]]]] = None,
            assignment_pools: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NetworkAssignmentPoolArgs']]]]] = None,
            creation_time: Optional[pulumi.Input[int]] = None,
            description: Optional[pulumi.Input[str]] = None,
            enable_broadcast: Optional[pulumi.Input[bool]] = None,
            flow_rules: Optional[pulumi.Input[str]] = None,
            id: Optional[pulumi.Input[str]] = None,
            multicast_limit: Optional[pulumi.Input[int]] = None,
            name: Optional[pulumi.Input[str]] = None,
            private: Optional[pulumi.Input[bool]] = None,
            routes: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NetworkRouteArgs']]]]] = None) -> 'Network':
        """
        Get an existing Network resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NetworkAssignIpv4Args']]]] assign_ipv4s: IPv4 Assignment RuleSets
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NetworkAssignIpv6Args']]]] assign_ipv6s: IPv6 Assignment RuleSets
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NetworkAssignmentPoolArgs']]]] assignment_pools: Rules regarding IPv4 and IPv6 assignments
        :param pulumi.Input[int] creation_time: The time at which this network was created, in epoch seconds
        :param pulumi.Input[str] description: The description of the network
        :param pulumi.Input[bool] enable_broadcast: Enable broadcast packets on the network
        :param pulumi.Input[str] flow_rules: The layer 2 flow rules to apply to packets traveling across this network. Please see https://www.zerotier.com/manual/#3*4*1 for more information.
        :param pulumi.Input[str] id: ZeroTier's internal network identifier, aka NetworkID
        :param pulumi.Input[int] multicast_limit: Maximum number of recipients per multicast or broadcast. Warning - Setting this to 0 will disable IPv4 communication on your network!
        :param pulumi.Input[str] name: The name of the network
        :param pulumi.Input[bool] private: Whether or not the network is private.  If false, members will *NOT* need to be authorized to join.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NetworkRouteArgs']]]] routes: A ipv4 or ipv6 network route
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _NetworkState.__new__(_NetworkState)

        __props__.__dict__["assign_ipv4s"] = assign_ipv4s
        __props__.__dict__["assign_ipv6s"] = assign_ipv6s
        __props__.__dict__["assignment_pools"] = assignment_pools
        __props__.__dict__["creation_time"] = creation_time
        __props__.__dict__["description"] = description
        __props__.__dict__["enable_broadcast"] = enable_broadcast
        __props__.__dict__["flow_rules"] = flow_rules
        __props__.__dict__["id"] = id
        __props__.__dict__["multicast_limit"] = multicast_limit
        __props__.__dict__["name"] = name
        __props__.__dict__["private"] = private
        __props__.__dict__["routes"] = routes
        return Network(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="assignIpv4s")
    def assign_ipv4s(self) -> pulumi.Output[Sequence['outputs.NetworkAssignIpv4']]:
        """
        IPv4 Assignment RuleSets
        """
        return pulumi.get(self, "assign_ipv4s")

    @property
    @pulumi.getter(name="assignIpv6s")
    def assign_ipv6s(self) -> pulumi.Output[Sequence['outputs.NetworkAssignIpv6']]:
        """
        IPv6 Assignment RuleSets
        """
        return pulumi.get(self, "assign_ipv6s")

    @property
    @pulumi.getter(name="assignmentPools")
    def assignment_pools(self) -> pulumi.Output[Sequence['outputs.NetworkAssignmentPool']]:
        """
        Rules regarding IPv4 and IPv6 assignments
        """
        return pulumi.get(self, "assignment_pools")

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> pulumi.Output[int]:
        """
        The time at which this network was created, in epoch seconds
        """
        return pulumi.get(self, "creation_time")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        The description of the network
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="enableBroadcast")
    def enable_broadcast(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable broadcast packets on the network
        """
        return pulumi.get(self, "enable_broadcast")

    @property
    @pulumi.getter(name="flowRules")
    def flow_rules(self) -> pulumi.Output[Optional[str]]:
        """
        The layer 2 flow rules to apply to packets traveling across this network. Please see https://www.zerotier.com/manual/#3*4*1 for more information.
        """
        return pulumi.get(self, "flow_rules")

    @property
    @pulumi.getter
    def id(self) -> pulumi.Output[str]:
        """
        ZeroTier's internal network identifier, aka NetworkID
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="multicastLimit")
    def multicast_limit(self) -> pulumi.Output[Optional[int]]:
        """
        Maximum number of recipients per multicast or broadcast. Warning - Setting this to 0 will disable IPv4 communication on your network!
        """
        return pulumi.get(self, "multicast_limit")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the network
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def private(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether or not the network is private.  If false, members will *NOT* need to be authorized to join.
        """
        return pulumi.get(self, "private")

    @property
    @pulumi.getter
    def routes(self) -> pulumi.Output[Sequence['outputs.NetworkRoute']]:
        """
        A ipv4 or ipv6 network route
        """
        return pulumi.get(self, "routes")

