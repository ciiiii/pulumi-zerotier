# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetNetworkResult',
    'AwaitableGetNetworkResult',
    'get_network',
    'get_network_output',
]

@pulumi.output_type
class GetNetworkResult:
    """
    A collection of values returned by getNetwork.
    """
    def __init__(__self__, assign_ipv4s=None, assign_ipv6s=None, assignment_pools=None, creation_time=None, description=None, enable_broadcast=None, flow_rules=None, id=None, multicast_limit=None, name=None, private=None, routes=None):
        if assign_ipv4s and not isinstance(assign_ipv4s, list):
            raise TypeError("Expected argument 'assign_ipv4s' to be a list")
        pulumi.set(__self__, "assign_ipv4s", assign_ipv4s)
        if assign_ipv6s and not isinstance(assign_ipv6s, list):
            raise TypeError("Expected argument 'assign_ipv6s' to be a list")
        pulumi.set(__self__, "assign_ipv6s", assign_ipv6s)
        if assignment_pools and not isinstance(assignment_pools, list):
            raise TypeError("Expected argument 'assignment_pools' to be a list")
        pulumi.set(__self__, "assignment_pools", assignment_pools)
        if creation_time and not isinstance(creation_time, int):
            raise TypeError("Expected argument 'creation_time' to be a int")
        pulumi.set(__self__, "creation_time", creation_time)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if enable_broadcast and not isinstance(enable_broadcast, bool):
            raise TypeError("Expected argument 'enable_broadcast' to be a bool")
        pulumi.set(__self__, "enable_broadcast", enable_broadcast)
        if flow_rules and not isinstance(flow_rules, str):
            raise TypeError("Expected argument 'flow_rules' to be a str")
        pulumi.set(__self__, "flow_rules", flow_rules)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if multicast_limit and not isinstance(multicast_limit, int):
            raise TypeError("Expected argument 'multicast_limit' to be a int")
        pulumi.set(__self__, "multicast_limit", multicast_limit)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if private and not isinstance(private, bool):
            raise TypeError("Expected argument 'private' to be a bool")
        pulumi.set(__self__, "private", private)
        if routes and not isinstance(routes, list):
            raise TypeError("Expected argument 'routes' to be a list")
        pulumi.set(__self__, "routes", routes)

    @property
    @pulumi.getter(name="assignIpv4s")
    def assign_ipv4s(self) -> Sequence['outputs.GetNetworkAssignIpv4Result']:
        """
        IPv4 Assignment RuleSets
        """
        return pulumi.get(self, "assign_ipv4s")

    @property
    @pulumi.getter(name="assignIpv6s")
    def assign_ipv6s(self) -> Sequence['outputs.GetNetworkAssignIpv6Result']:
        """
        IPv6 Assignment RuleSets
        """
        return pulumi.get(self, "assign_ipv6s")

    @property
    @pulumi.getter(name="assignmentPools")
    def assignment_pools(self) -> Sequence['outputs.GetNetworkAssignmentPoolResult']:
        """
        Rules regarding IPv4 and IPv6 assignments
        """
        return pulumi.get(self, "assignment_pools")

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> int:
        """
        The time at which this network was created, in epoch seconds
        """
        return pulumi.get(self, "creation_time")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        The description of the network
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="enableBroadcast")
    def enable_broadcast(self) -> Optional[bool]:
        """
        Enable broadcast packets on the network
        """
        return pulumi.get(self, "enable_broadcast")

    @property
    @pulumi.getter(name="flowRules")
    def flow_rules(self) -> Optional[str]:
        """
        The layer 2 flow rules to apply to packets traveling across this network. Please see https://www.zerotier.com/manual/#3*4*1 for more information.
        """
        return pulumi.get(self, "flow_rules")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        ZeroTier's internal network identifier, aka NetworkID
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="multicastLimit")
    def multicast_limit(self) -> Optional[int]:
        """
        Maximum number of recipients per multicast or broadcast. Warning - Setting this to 0 will disable IPv4 communication on your network!
        """
        return pulumi.get(self, "multicast_limit")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the network
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def private(self) -> Optional[bool]:
        """
        Whether or not the network is private.  If false, members will *NOT* need to be authorized to join.
        """
        return pulumi.get(self, "private")

    @property
    @pulumi.getter
    def routes(self) -> Sequence['outputs.GetNetworkRouteResult']:
        """
        A ipv4 or ipv6 network route
        """
        return pulumi.get(self, "routes")


class AwaitableGetNetworkResult(GetNetworkResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetNetworkResult(
            assign_ipv4s=self.assign_ipv4s,
            assign_ipv6s=self.assign_ipv6s,
            assignment_pools=self.assignment_pools,
            creation_time=self.creation_time,
            description=self.description,
            enable_broadcast=self.enable_broadcast,
            flow_rules=self.flow_rules,
            id=self.id,
            multicast_limit=self.multicast_limit,
            name=self.name,
            private=self.private,
            routes=self.routes)


def get_network(assign_ipv4s: Optional[Sequence[pulumi.InputType['GetNetworkAssignIpv4Args']]] = None,
                assign_ipv6s: Optional[Sequence[pulumi.InputType['GetNetworkAssignIpv6Args']]] = None,
                assignment_pools: Optional[Sequence[pulumi.InputType['GetNetworkAssignmentPoolArgs']]] = None,
                description: Optional[str] = None,
                enable_broadcast: Optional[bool] = None,
                flow_rules: Optional[str] = None,
                id: Optional[str] = None,
                multicast_limit: Optional[int] = None,
                name: Optional[str] = None,
                private: Optional[bool] = None,
                routes: Optional[Sequence[pulumi.InputType['GetNetworkRouteArgs']]] = None,
                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetNetworkResult:
    """
    Data source for ZeroTier networks, allowing you to find a network by ID

    ## Example Usage

    ```python
    import pulumi
    import pulumi_zerotier as zerotier

    bob = zerotier.get_network(id=zerotier_network["bobs_garage"]["id"])
    ```


    :param Sequence[pulumi.InputType['GetNetworkAssignIpv4Args']] assign_ipv4s: IPv4 Assignment RuleSets
    :param Sequence[pulumi.InputType['GetNetworkAssignIpv6Args']] assign_ipv6s: IPv6 Assignment RuleSets
    :param Sequence[pulumi.InputType['GetNetworkAssignmentPoolArgs']] assignment_pools: Rules regarding IPv4 and IPv6 assignments
    :param str description: The description of the network
    :param bool enable_broadcast: Enable broadcast packets on the network
    :param str flow_rules: The layer 2 flow rules to apply to packets traveling across this network. Please see https://www.zerotier.com/manual/#3*4*1 for more information.
    :param str id: ZeroTier's internal network identifier, aka NetworkID
    :param int multicast_limit: Maximum number of recipients per multicast or broadcast. Warning - Setting this to 0 will disable IPv4 communication on your network!
    :param str name: The name of the network
    :param bool private: Whether or not the network is private.  If false, members will *NOT* need to be authorized to join.
    :param Sequence[pulumi.InputType['GetNetworkRouteArgs']] routes: A ipv4 or ipv6 network route
    """
    __args__ = dict()
    __args__['assignIpv4s'] = assign_ipv4s
    __args__['assignIpv6s'] = assign_ipv6s
    __args__['assignmentPools'] = assignment_pools
    __args__['description'] = description
    __args__['enableBroadcast'] = enable_broadcast
    __args__['flowRules'] = flow_rules
    __args__['id'] = id
    __args__['multicastLimit'] = multicast_limit
    __args__['name'] = name
    __args__['private'] = private
    __args__['routes'] = routes
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('zerotier:index/getNetwork:getNetwork', __args__, opts=opts, typ=GetNetworkResult).value

    return AwaitableGetNetworkResult(
        assign_ipv4s=__ret__.assign_ipv4s,
        assign_ipv6s=__ret__.assign_ipv6s,
        assignment_pools=__ret__.assignment_pools,
        creation_time=__ret__.creation_time,
        description=__ret__.description,
        enable_broadcast=__ret__.enable_broadcast,
        flow_rules=__ret__.flow_rules,
        id=__ret__.id,
        multicast_limit=__ret__.multicast_limit,
        name=__ret__.name,
        private=__ret__.private,
        routes=__ret__.routes)


@_utilities.lift_output_func(get_network)
def get_network_output(assign_ipv4s: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetNetworkAssignIpv4Args']]]]] = None,
                       assign_ipv6s: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetNetworkAssignIpv6Args']]]]] = None,
                       assignment_pools: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetNetworkAssignmentPoolArgs']]]]] = None,
                       description: Optional[pulumi.Input[Optional[str]]] = None,
                       enable_broadcast: Optional[pulumi.Input[Optional[bool]]] = None,
                       flow_rules: Optional[pulumi.Input[Optional[str]]] = None,
                       id: Optional[pulumi.Input[Optional[str]]] = None,
                       multicast_limit: Optional[pulumi.Input[Optional[int]]] = None,
                       name: Optional[pulumi.Input[Optional[str]]] = None,
                       private: Optional[pulumi.Input[Optional[bool]]] = None,
                       routes: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetNetworkRouteArgs']]]]] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetNetworkResult]:
    """
    Data source for ZeroTier networks, allowing you to find a network by ID

    ## Example Usage

    ```python
    import pulumi
    import pulumi_zerotier as zerotier

    bob = zerotier.get_network(id=zerotier_network["bobs_garage"]["id"])
    ```


    :param Sequence[pulumi.InputType['GetNetworkAssignIpv4Args']] assign_ipv4s: IPv4 Assignment RuleSets
    :param Sequence[pulumi.InputType['GetNetworkAssignIpv6Args']] assign_ipv6s: IPv6 Assignment RuleSets
    :param Sequence[pulumi.InputType['GetNetworkAssignmentPoolArgs']] assignment_pools: Rules regarding IPv4 and IPv6 assignments
    :param str description: The description of the network
    :param bool enable_broadcast: Enable broadcast packets on the network
    :param str flow_rules: The layer 2 flow rules to apply to packets traveling across this network. Please see https://www.zerotier.com/manual/#3*4*1 for more information.
    :param str id: ZeroTier's internal network identifier, aka NetworkID
    :param int multicast_limit: Maximum number of recipients per multicast or broadcast. Warning - Setting this to 0 will disable IPv4 communication on your network!
    :param str name: The name of the network
    :param bool private: Whether or not the network is private.  If false, members will *NOT* need to be authorized to join.
    :param Sequence[pulumi.InputType['GetNetworkRouteArgs']] routes: A ipv4 or ipv6 network route
    """
    ...
