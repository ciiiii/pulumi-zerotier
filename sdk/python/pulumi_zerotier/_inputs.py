# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'NetworkAssignIpv4Args',
    'NetworkAssignIpv6Args',
    'NetworkAssignmentPoolArgs',
    'NetworkRouteArgs',
    'GerNetworkAssignIpv4Args',
    'GerNetworkAssignIpv6Args',
    'GerNetworkAssignmentPoolArgs',
    'GerNetworkRouteArgs',
]

@pulumi.input_type
class NetworkAssignIpv4Args:
    def __init__(__self__, *,
                 zerotier: Optional[pulumi.Input[bool]] = None):
        if zerotier is not None:
            pulumi.set(__self__, "zerotier", zerotier)

    @property
    @pulumi.getter
    def zerotier(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "zerotier")

    @zerotier.setter
    def zerotier(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "zerotier", value)


@pulumi.input_type
class NetworkAssignIpv6Args:
    def __init__(__self__, *,
                 rfc4193: Optional[pulumi.Input[bool]] = None,
                 sixplane: Optional[pulumi.Input[bool]] = None,
                 zerotier: Optional[pulumi.Input[bool]] = None):
        if rfc4193 is not None:
            pulumi.set(__self__, "rfc4193", rfc4193)
        if sixplane is not None:
            pulumi.set(__self__, "sixplane", sixplane)
        if zerotier is not None:
            pulumi.set(__self__, "zerotier", zerotier)

    @property
    @pulumi.getter
    def rfc4193(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "rfc4193")

    @rfc4193.setter
    def rfc4193(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "rfc4193", value)

    @property
    @pulumi.getter
    def sixplane(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "sixplane")

    @sixplane.setter
    def sixplane(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "sixplane", value)

    @property
    @pulumi.getter
    def zerotier(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "zerotier")

    @zerotier.setter
    def zerotier(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "zerotier", value)


@pulumi.input_type
class NetworkAssignmentPoolArgs:
    def __init__(__self__, *,
                 end: Optional[pulumi.Input[str]] = None,
                 start: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] end: The last address in the assignment rule. This must be the highest number in the pool. end must also be accompanied by start.
        :param pulumi.Input[str] start: The first address in the assignment rule. This must be the lowest number in the pool. `start` must also be accompanied by `end`.
        """
        if end is not None:
            pulumi.set(__self__, "end", end)
        if start is not None:
            pulumi.set(__self__, "start", start)

    @property
    @pulumi.getter
    def end(self) -> Optional[pulumi.Input[str]]:
        """
        The last address in the assignment rule. This must be the highest number in the pool. end must also be accompanied by start.
        """
        return pulumi.get(self, "end")

    @end.setter
    def end(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end", value)

    @property
    @pulumi.getter
    def start(self) -> Optional[pulumi.Input[str]]:
        """
        The first address in the assignment rule. This must be the lowest number in the pool. `start` must also be accompanied by `end`.
        """
        return pulumi.get(self, "start")

    @start.setter
    def start(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start", value)


@pulumi.input_type
class NetworkRouteArgs:
    def __init__(__self__, *,
                 target: pulumi.Input[str],
                 via: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] target: Network to route for
        :param pulumi.Input[str] via: Gateway address
        """
        pulumi.set(__self__, "target", target)
        if via is not None:
            pulumi.set(__self__, "via", via)

    @property
    @pulumi.getter
    def target(self) -> pulumi.Input[str]:
        """
        Network to route for
        """
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: pulumi.Input[str]):
        pulumi.set(self, "target", value)

    @property
    @pulumi.getter
    def via(self) -> Optional[pulumi.Input[str]]:
        """
        Gateway address
        """
        return pulumi.get(self, "via")

    @via.setter
    def via(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "via", value)


@pulumi.input_type
class GerNetworkAssignIpv4Args:
    def __init__(__self__, *,
                 zerotier: Optional[bool] = None):
        if zerotier is not None:
            pulumi.set(__self__, "zerotier", zerotier)

    @property
    @pulumi.getter
    def zerotier(self) -> Optional[bool]:
        return pulumi.get(self, "zerotier")

    @zerotier.setter
    def zerotier(self, value: Optional[bool]):
        pulumi.set(self, "zerotier", value)


@pulumi.input_type
class GerNetworkAssignIpv6Args:
    def __init__(__self__, *,
                 rfc4193: Optional[bool] = None,
                 sixplane: Optional[bool] = None,
                 zerotier: Optional[bool] = None):
        if rfc4193 is not None:
            pulumi.set(__self__, "rfc4193", rfc4193)
        if sixplane is not None:
            pulumi.set(__self__, "sixplane", sixplane)
        if zerotier is not None:
            pulumi.set(__self__, "zerotier", zerotier)

    @property
    @pulumi.getter
    def rfc4193(self) -> Optional[bool]:
        return pulumi.get(self, "rfc4193")

    @rfc4193.setter
    def rfc4193(self, value: Optional[bool]):
        pulumi.set(self, "rfc4193", value)

    @property
    @pulumi.getter
    def sixplane(self) -> Optional[bool]:
        return pulumi.get(self, "sixplane")

    @sixplane.setter
    def sixplane(self, value: Optional[bool]):
        pulumi.set(self, "sixplane", value)

    @property
    @pulumi.getter
    def zerotier(self) -> Optional[bool]:
        return pulumi.get(self, "zerotier")

    @zerotier.setter
    def zerotier(self, value: Optional[bool]):
        pulumi.set(self, "zerotier", value)


@pulumi.input_type
class GerNetworkAssignmentPoolArgs:
    def __init__(__self__, *,
                 end: Optional[str] = None,
                 start: Optional[str] = None):
        if end is not None:
            pulumi.set(__self__, "end", end)
        if start is not None:
            pulumi.set(__self__, "start", start)

    @property
    @pulumi.getter
    def end(self) -> Optional[str]:
        return pulumi.get(self, "end")

    @end.setter
    def end(self, value: Optional[str]):
        pulumi.set(self, "end", value)

    @property
    @pulumi.getter
    def start(self) -> Optional[str]:
        return pulumi.get(self, "start")

    @start.setter
    def start(self, value: Optional[str]):
        pulumi.set(self, "start", value)


@pulumi.input_type
class GerNetworkRouteArgs:
    def __init__(__self__, *,
                 target: str,
                 via: Optional[str] = None):
        pulumi.set(__self__, "target", target)
        if via is not None:
            pulumi.set(__self__, "via", via)

    @property
    @pulumi.getter
    def target(self) -> str:
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: str):
        pulumi.set(self, "target", value)

    @property
    @pulumi.getter
    def via(self) -> Optional[str]:
        return pulumi.get(self, "via")

    @via.setter
    def via(self, value: Optional[str]):
        pulumi.set(self, "via", value)


