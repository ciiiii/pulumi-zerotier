# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['MemberArgs', 'Member']

@pulumi.input_type
class MemberArgs:
    def __init__(__self__, *,
                 member_id: pulumi.Input[str],
                 network_id: pulumi.Input[str],
                 allow_ethernet_bridging: Optional[pulumi.Input[bool]] = None,
                 authorized: Optional[pulumi.Input[bool]] = None,
                 capabilities: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 hidden: Optional[pulumi.Input[bool]] = None,
                 ip_assignments: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 no_auto_assign_ips: Optional[pulumi.Input[bool]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[Sequence[pulumi.Input[int]]]]]] = None):
        """
        The set of arguments for constructing a Member resource.
        :param pulumi.Input[str] member_id: ID of this member.
        :param pulumi.Input[str] network_id: ID of the network this member belongs to
        :param pulumi.Input[bool] allow_ethernet_bridging: Is this member allowed to activate ethernet bridging over the ZeroTier network?
        :param pulumi.Input[bool] authorized: Is the member authorized on the network?
        :param pulumi.Input[Sequence[pulumi.Input[int]]] capabilities: List of network capabilities
        :param pulumi.Input[str] description: Text description of this member.
        :param pulumi.Input[bool] hidden: Is this member visible?
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ip_assignments: List of IP address assignments
        :param pulumi.Input[str] name: Descriptive name of this member.
        :param pulumi.Input[bool] no_auto_assign_ips: Exempt this member from the IP auto assignment pool on a Network
        :param pulumi.Input[Sequence[pulumi.Input[Sequence[pulumi.Input[int]]]]] tags: List of network tags
        """
        pulumi.set(__self__, "member_id", member_id)
        pulumi.set(__self__, "network_id", network_id)
        if allow_ethernet_bridging is not None:
            pulumi.set(__self__, "allow_ethernet_bridging", allow_ethernet_bridging)
        if authorized is not None:
            pulumi.set(__self__, "authorized", authorized)
        if capabilities is not None:
            pulumi.set(__self__, "capabilities", capabilities)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if hidden is not None:
            pulumi.set(__self__, "hidden", hidden)
        if ip_assignments is not None:
            pulumi.set(__self__, "ip_assignments", ip_assignments)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if no_auto_assign_ips is not None:
            pulumi.set(__self__, "no_auto_assign_ips", no_auto_assign_ips)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="memberId")
    def member_id(self) -> pulumi.Input[str]:
        """
        ID of this member.
        """
        return pulumi.get(self, "member_id")

    @member_id.setter
    def member_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "member_id", value)

    @property
    @pulumi.getter(name="networkId")
    def network_id(self) -> pulumi.Input[str]:
        """
        ID of the network this member belongs to
        """
        return pulumi.get(self, "network_id")

    @network_id.setter
    def network_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "network_id", value)

    @property
    @pulumi.getter(name="allowEthernetBridging")
    def allow_ethernet_bridging(self) -> Optional[pulumi.Input[bool]]:
        """
        Is this member allowed to activate ethernet bridging over the ZeroTier network?
        """
        return pulumi.get(self, "allow_ethernet_bridging")

    @allow_ethernet_bridging.setter
    def allow_ethernet_bridging(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_ethernet_bridging", value)

    @property
    @pulumi.getter
    def authorized(self) -> Optional[pulumi.Input[bool]]:
        """
        Is the member authorized on the network?
        """
        return pulumi.get(self, "authorized")

    @authorized.setter
    def authorized(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "authorized", value)

    @property
    @pulumi.getter
    def capabilities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        List of network capabilities
        """
        return pulumi.get(self, "capabilities")

    @capabilities.setter
    def capabilities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "capabilities", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Text description of this member.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def hidden(self) -> Optional[pulumi.Input[bool]]:
        """
        Is this member visible?
        """
        return pulumi.get(self, "hidden")

    @hidden.setter
    def hidden(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "hidden", value)

    @property
    @pulumi.getter(name="ipAssignments")
    def ip_assignments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of IP address assignments
        """
        return pulumi.get(self, "ip_assignments")

    @ip_assignments.setter
    def ip_assignments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ip_assignments", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Descriptive name of this member.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="noAutoAssignIps")
    def no_auto_assign_ips(self) -> Optional[pulumi.Input[bool]]:
        """
        Exempt this member from the IP auto assignment pool on a Network
        """
        return pulumi.get(self, "no_auto_assign_ips")

    @no_auto_assign_ips.setter
    def no_auto_assign_ips(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "no_auto_assign_ips", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[Sequence[pulumi.Input[int]]]]]]:
        """
        List of network tags
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[Sequence[pulumi.Input[int]]]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _MemberState:
    def __init__(__self__, *,
                 allow_ethernet_bridging: Optional[pulumi.Input[bool]] = None,
                 authorized: Optional[pulumi.Input[bool]] = None,
                 capabilities: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 hidden: Optional[pulumi.Input[bool]] = None,
                 ip_assignments: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 member_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network_id: Optional[pulumi.Input[str]] = None,
                 no_auto_assign_ips: Optional[pulumi.Input[bool]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[Sequence[pulumi.Input[int]]]]]] = None):
        """
        Input properties used for looking up and filtering Member resources.
        :param pulumi.Input[bool] allow_ethernet_bridging: Is this member allowed to activate ethernet bridging over the ZeroTier network?
        :param pulumi.Input[bool] authorized: Is the member authorized on the network?
        :param pulumi.Input[Sequence[pulumi.Input[int]]] capabilities: List of network capabilities
        :param pulumi.Input[str] description: Text description of this member.
        :param pulumi.Input[bool] hidden: Is this member visible?
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ip_assignments: List of IP address assignments
        :param pulumi.Input[str] member_id: ID of this member.
        :param pulumi.Input[str] name: Descriptive name of this member.
        :param pulumi.Input[str] network_id: ID of the network this member belongs to
        :param pulumi.Input[bool] no_auto_assign_ips: Exempt this member from the IP auto assignment pool on a Network
        :param pulumi.Input[Sequence[pulumi.Input[Sequence[pulumi.Input[int]]]]] tags: List of network tags
        """
        if allow_ethernet_bridging is not None:
            pulumi.set(__self__, "allow_ethernet_bridging", allow_ethernet_bridging)
        if authorized is not None:
            pulumi.set(__self__, "authorized", authorized)
        if capabilities is not None:
            pulumi.set(__self__, "capabilities", capabilities)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if hidden is not None:
            pulumi.set(__self__, "hidden", hidden)
        if ip_assignments is not None:
            pulumi.set(__self__, "ip_assignments", ip_assignments)
        if member_id is not None:
            pulumi.set(__self__, "member_id", member_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if network_id is not None:
            pulumi.set(__self__, "network_id", network_id)
        if no_auto_assign_ips is not None:
            pulumi.set(__self__, "no_auto_assign_ips", no_auto_assign_ips)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="allowEthernetBridging")
    def allow_ethernet_bridging(self) -> Optional[pulumi.Input[bool]]:
        """
        Is this member allowed to activate ethernet bridging over the ZeroTier network?
        """
        return pulumi.get(self, "allow_ethernet_bridging")

    @allow_ethernet_bridging.setter
    def allow_ethernet_bridging(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_ethernet_bridging", value)

    @property
    @pulumi.getter
    def authorized(self) -> Optional[pulumi.Input[bool]]:
        """
        Is the member authorized on the network?
        """
        return pulumi.get(self, "authorized")

    @authorized.setter
    def authorized(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "authorized", value)

    @property
    @pulumi.getter
    def capabilities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        List of network capabilities
        """
        return pulumi.get(self, "capabilities")

    @capabilities.setter
    def capabilities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "capabilities", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Text description of this member.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def hidden(self) -> Optional[pulumi.Input[bool]]:
        """
        Is this member visible?
        """
        return pulumi.get(self, "hidden")

    @hidden.setter
    def hidden(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "hidden", value)

    @property
    @pulumi.getter(name="ipAssignments")
    def ip_assignments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of IP address assignments
        """
        return pulumi.get(self, "ip_assignments")

    @ip_assignments.setter
    def ip_assignments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ip_assignments", value)

    @property
    @pulumi.getter(name="memberId")
    def member_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of this member.
        """
        return pulumi.get(self, "member_id")

    @member_id.setter
    def member_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "member_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Descriptive name of this member.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="networkId")
    def network_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the network this member belongs to
        """
        return pulumi.get(self, "network_id")

    @network_id.setter
    def network_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_id", value)

    @property
    @pulumi.getter(name="noAutoAssignIps")
    def no_auto_assign_ips(self) -> Optional[pulumi.Input[bool]]:
        """
        Exempt this member from the IP auto assignment pool on a Network
        """
        return pulumi.get(self, "no_auto_assign_ips")

    @no_auto_assign_ips.setter
    def no_auto_assign_ips(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "no_auto_assign_ips", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[Sequence[pulumi.Input[int]]]]]]:
        """
        List of network tags
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[Sequence[pulumi.Input[int]]]]]]):
        pulumi.set(self, "tags", value)


class Member(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allow_ethernet_bridging: Optional[pulumi.Input[bool]] = None,
                 authorized: Optional[pulumi.Input[bool]] = None,
                 capabilities: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 hidden: Optional[pulumi.Input[bool]] = None,
                 ip_assignments: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 member_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network_id: Optional[pulumi.Input[str]] = None,
                 no_auto_assign_ips: Optional[pulumi.Input[bool]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[Sequence[pulumi.Input[int]]]]]] = None,
                 __props__=None):
        """
        Manage ZeroTier members and join them to networks

        ## Example Usage

        ```python
        import pulumi
        import pulumi_zerotier as zerotier

        alice = zerotier.Member("alice",
            member_id=zerotier_identity["alice"]["id"],
            network_id=zerotier_network["alicenet"]["id"],
            description="Hello, world",
            hidden=True,
            allow_ethernet_bridging=True,
            no_auto_assign_ips=True,
            ip_assignments=["10.0.0.1"])
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] allow_ethernet_bridging: Is this member allowed to activate ethernet bridging over the ZeroTier network?
        :param pulumi.Input[bool] authorized: Is the member authorized on the network?
        :param pulumi.Input[Sequence[pulumi.Input[int]]] capabilities: List of network capabilities
        :param pulumi.Input[str] description: Text description of this member.
        :param pulumi.Input[bool] hidden: Is this member visible?
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ip_assignments: List of IP address assignments
        :param pulumi.Input[str] member_id: ID of this member.
        :param pulumi.Input[str] name: Descriptive name of this member.
        :param pulumi.Input[str] network_id: ID of the network this member belongs to
        :param pulumi.Input[bool] no_auto_assign_ips: Exempt this member from the IP auto assignment pool on a Network
        :param pulumi.Input[Sequence[pulumi.Input[Sequence[pulumi.Input[int]]]]] tags: List of network tags
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: MemberArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manage ZeroTier members and join them to networks

        ## Example Usage

        ```python
        import pulumi
        import pulumi_zerotier as zerotier

        alice = zerotier.Member("alice",
            member_id=zerotier_identity["alice"]["id"],
            network_id=zerotier_network["alicenet"]["id"],
            description="Hello, world",
            hidden=True,
            allow_ethernet_bridging=True,
            no_auto_assign_ips=True,
            ip_assignments=["10.0.0.1"])
        ```

        :param str resource_name: The name of the resource.
        :param MemberArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(MemberArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allow_ethernet_bridging: Optional[pulumi.Input[bool]] = None,
                 authorized: Optional[pulumi.Input[bool]] = None,
                 capabilities: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 hidden: Optional[pulumi.Input[bool]] = None,
                 ip_assignments: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 member_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network_id: Optional[pulumi.Input[str]] = None,
                 no_auto_assign_ips: Optional[pulumi.Input[bool]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[Sequence[pulumi.Input[int]]]]]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = MemberArgs.__new__(MemberArgs)

            __props__.__dict__["allow_ethernet_bridging"] = allow_ethernet_bridging
            __props__.__dict__["authorized"] = authorized
            __props__.__dict__["capabilities"] = capabilities
            __props__.__dict__["description"] = description
            __props__.__dict__["hidden"] = hidden
            __props__.__dict__["ip_assignments"] = ip_assignments
            if member_id is None and not opts.urn:
                raise TypeError("Missing required property 'member_id'")
            __props__.__dict__["member_id"] = member_id
            __props__.__dict__["name"] = name
            if network_id is None and not opts.urn:
                raise TypeError("Missing required property 'network_id'")
            __props__.__dict__["network_id"] = network_id
            __props__.__dict__["no_auto_assign_ips"] = no_auto_assign_ips
            __props__.__dict__["tags"] = tags
        super(Member, __self__).__init__(
            'zerotier:index/member:Member',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            allow_ethernet_bridging: Optional[pulumi.Input[bool]] = None,
            authorized: Optional[pulumi.Input[bool]] = None,
            capabilities: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
            description: Optional[pulumi.Input[str]] = None,
            hidden: Optional[pulumi.Input[bool]] = None,
            ip_assignments: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            member_id: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            network_id: Optional[pulumi.Input[str]] = None,
            no_auto_assign_ips: Optional[pulumi.Input[bool]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[Sequence[pulumi.Input[int]]]]]] = None) -> 'Member':
        """
        Get an existing Member resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] allow_ethernet_bridging: Is this member allowed to activate ethernet bridging over the ZeroTier network?
        :param pulumi.Input[bool] authorized: Is the member authorized on the network?
        :param pulumi.Input[Sequence[pulumi.Input[int]]] capabilities: List of network capabilities
        :param pulumi.Input[str] description: Text description of this member.
        :param pulumi.Input[bool] hidden: Is this member visible?
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ip_assignments: List of IP address assignments
        :param pulumi.Input[str] member_id: ID of this member.
        :param pulumi.Input[str] name: Descriptive name of this member.
        :param pulumi.Input[str] network_id: ID of the network this member belongs to
        :param pulumi.Input[bool] no_auto_assign_ips: Exempt this member from the IP auto assignment pool on a Network
        :param pulumi.Input[Sequence[pulumi.Input[Sequence[pulumi.Input[int]]]]] tags: List of network tags
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _MemberState.__new__(_MemberState)

        __props__.__dict__["allow_ethernet_bridging"] = allow_ethernet_bridging
        __props__.__dict__["authorized"] = authorized
        __props__.__dict__["capabilities"] = capabilities
        __props__.__dict__["description"] = description
        __props__.__dict__["hidden"] = hidden
        __props__.__dict__["ip_assignments"] = ip_assignments
        __props__.__dict__["member_id"] = member_id
        __props__.__dict__["name"] = name
        __props__.__dict__["network_id"] = network_id
        __props__.__dict__["no_auto_assign_ips"] = no_auto_assign_ips
        __props__.__dict__["tags"] = tags
        return Member(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="allowEthernetBridging")
    def allow_ethernet_bridging(self) -> pulumi.Output[Optional[bool]]:
        """
        Is this member allowed to activate ethernet bridging over the ZeroTier network?
        """
        return pulumi.get(self, "allow_ethernet_bridging")

    @property
    @pulumi.getter
    def authorized(self) -> pulumi.Output[Optional[bool]]:
        """
        Is the member authorized on the network?
        """
        return pulumi.get(self, "authorized")

    @property
    @pulumi.getter
    def capabilities(self) -> pulumi.Output[Sequence[int]]:
        """
        List of network capabilities
        """
        return pulumi.get(self, "capabilities")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Text description of this member.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def hidden(self) -> pulumi.Output[Optional[bool]]:
        """
        Is this member visible?
        """
        return pulumi.get(self, "hidden")

    @property
    @pulumi.getter(name="ipAssignments")
    def ip_assignments(self) -> pulumi.Output[Sequence[str]]:
        """
        List of IP address assignments
        """
        return pulumi.get(self, "ip_assignments")

    @property
    @pulumi.getter(name="memberId")
    def member_id(self) -> pulumi.Output[str]:
        """
        ID of this member.
        """
        return pulumi.get(self, "member_id")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Descriptive name of this member.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkId")
    def network_id(self) -> pulumi.Output[str]:
        """
        ID of the network this member belongs to
        """
        return pulumi.get(self, "network_id")

    @property
    @pulumi.getter(name="noAutoAssignIps")
    def no_auto_assign_ips(self) -> pulumi.Output[Optional[bool]]:
        """
        Exempt this member from the IP auto assignment pool on a Network
        """
        return pulumi.get(self, "no_auto_assign_ips")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Sequence[Sequence[int]]]:
        """
        List of network tags
        """
        return pulumi.get(self, "tags")

